// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-tvos11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Purchasely
import AVFoundation
import AVKit
import CommonCrypto
import Foundation
@_exported import Purchasely
import StoreKit
import Swift
import TVUIKit
import UIKit
extension Array {
  public subscript(safe index: Swift.Int) -> Element? {
    get
  }
}
public func loc(_ textToTranslate: Swift.String, comment: Swift.String = "", language: Swift.String? = nil) -> Swift.String
extension NSNotification.Name {
  public static let ply_purchasedSubscription: Foundation.Notification.Name
}
public enum PLYActionError : Swift.Error {
  case unknownActionType
  public static func == (a: Purchasely.PLYActionError, b: Purchasely.PLYActionError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public enum PLYAlertMessage : Swift.Int {
  case commonError
  case inAppSuccess
  case inAppDeferred
  case inAppSuccessUnauthentified
  case inAppRestorationSuccess
  case inAppRestorationError
  case inAppError
  case unsubscribeAndroid
  public var title: Swift.String {
    get
  }
  public var content: Swift.String? {
    get
  }
  public var buttonTitle: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYComponentError : Swift.Error {
  case unknownComponentType
  public static func == (a: Purchasely.PLYComponentError, b: Purchasely.PLYComponentError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public enum PLYEnvironment : Swift.Int {
  case prod
  case staging
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYError : Swift.Error {
  case application(message: Swift.String?, code: Swift.String?)
  case parsing
  case network(statusCode: Swift.Int?, error: Swift.Error?)
  case productNotFound
  case deferredPayment
  case alreadyPremium
  case absentReceipt
  case validationFailed
  case clientInvalid
  case paymentCancelled
  case paymentInvalid
  case paymentNotAllowed
  case storeProductNotAvailable
  case cloudServicePermissionDenied
  case cloudServiceNetworkConnectionFailed
  case cloudServiceRevoked
  case purchaseAlreadyRunning
  case restorationAlreadyRunning
  case noProductsToRestore
  case restorationFailedWithErrors([Swift.Error])
  case restorationPartial([Swift.String], [Swift.Error])
  case receiptValidationTimedOut
  case unknown
}
extension PLYError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public enum PLYEvent : Swift.Int {
  case appInstalled
  case appUpdated
  case appStarted
  case productPageViewed
  case loginTapped
  case purchaseFromStoreTapped
  case purchaseTapped
  case purchaseCancelled
  case inAppPurchasing
  case inAppPurchased
  case inAppRenewed
  case receiptCreated
  case receiptValidated
  case receiptFailed
  case restoreStarted
  case inAppRestored
  case restoreSucceeded
  case restoreFailed
  case inAppDeferred
  case inAppPurchaseFailed
  case linkOpened
  case subscriptionsListViewed
  case subscriptionDetailsViewed
  case subscriptionCancelTapped
  case subscriptionPlanTapped
  case cancellationReasonPublished
  public var name: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public class PLYImage : Swift.Decodable {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public enum PLYLabelHighlightsError : Swift.Error {
  case invalidRange
  public static func == (a: Purchasely.PLYLabelHighlightsError, b: Purchasely.PLYLabelHighlightsError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum PluralType {
  case none
  case one
  case many
  public static func == (a: Purchasely.PluralType, b: Purchasely.PluralType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public func PLYLocalizedPluralString(_ key: Swift.String, count: Swift.Int, language: Swift.String?) -> Swift.String
public func PLYLocalizedPluralString(_ key: Swift.String, pluralType: Purchasely.PluralType, language: Swift.String?) -> Swift.String
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PLYLogger : ObjectiveC.NSObject {
  @objc public enum LogLevel : Swift.Int {
    case debug
    case info
    case warn
    case error
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc public class PLYPlan : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var vendorId: Swift.String
  @objc public var name: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
extension PLYPlan {
  @objc dynamic public func localizedFullPrice(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedPrice(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedPeriod(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public var hasIntroductoryPrice: Swift.Bool {
    @objc get
  }
  @objc dynamic public func localizedFullIntroductoryPrice(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedIntroductoryPrice(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedIntroductoryPeriod(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedIntroductoryDuration(language: Swift.String? = nil) -> Swift.String?
}
@objc public class PLYProduct : ObjectiveC.NSObject, Swift.Decodable {
  public var vendorId: Swift.String
  public var plans: [Purchasely.PLYPlan]
  public var name: Swift.String?
  public var termsAndConditions: Swift.String?
  public var icon: Purchasely.PLYImage?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  @objc override dynamic public init()
}
@objc public class PLYSubscription : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var plan: Purchasely.PLYPlan
  @objc public var subscriptionSource: Purchasely.PLYSubscriptionSource
  @objc public var nextRenewalDate: Foundation.Date?
  @objc public var cancelledDate: Foundation.Date?
  required public init(from decoder: Swift.Decoder) throws
  @objc public func unsubscribe()
  @objc deinit
  @objc override dynamic public init()
}
public enum PLYSubscriptionSourceError : Swift.Error {
  case invalidStringFormat
  public static func == (a: Purchasely.PLYSubscriptionSourceError, b: Purchasely.PLYSubscriptionSourceError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public enum PLYSubscriptionSource : Swift.Int {
  case appStore
  case playStore
  case none
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYUIControllerType : Swift.Int {
  case subscriptionList
  case productPage
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PLYUIDelegate {
  @objc func display(controller: UIKit.UIViewController, type: Purchasely.PLYUIControllerType)
  @objc func display(alert: Purchasely.PLYAlertMessage, error: Swift.Error?)
}
public typealias PLYVoidClosure = () -> Swift.Void
public typealias PLYErrorClosure = (Swift.Error) -> ()
@objc public protocol PLYEventDelegate {
  @objc func eventTriggered(_ event: Purchasely.PLYEvent, properties: [Swift.String : Any]?)
}
extension Purchasely {
  @objc public static var deviceKey: Swift.String {
    @objc get
  }
  @objc dynamic public class func start(withAPIKey apiKey: Swift.String, appUserId: Swift.String? = nil, eventDelegate: Purchasely.PLYEventDelegate? = nil, uiDelegate: Purchasely.PLYUIDelegate? = nil, logLevel: Purchasely.PLYLogger.LogLevel = .error)
  @objc dynamic public class func setEventDelegate(_ eventDelegate: Purchasely.PLYEventDelegate?)
  @objc dynamic public class func setUIDelegate(_ uiDelegate: Purchasely.PLYUIDelegate?)
  @objc dynamic public class func setAppUserId(_ appUserId: Swift.String?)
  @objc dynamic public class func isReadyToPurchase(_ ready: Swift.Bool)
  @objc dynamic public class func setEnvironment(_ environment: Purchasely.PLYEnvironment)
  @objc dynamic public class func setLogLevel(_ logLevel: Purchasely.PLYLogger.LogLevel)
  @objc dynamic public class func product(with vendorId: Swift.String, success: @escaping (Purchasely.PLYProduct) -> Swift.Void, failure: @escaping (Swift.Error?) -> Swift.Void)
  @objc dynamic public class func plan(with vendorId: Swift.String, success: @escaping (Purchasely.PLYPlan) -> Swift.Void, failure: @escaping (Swift.Error?) -> Swift.Void)
  @objc dynamic public class func userSubscriptions(success: @escaping ([Purchasely.PLYSubscription]?) -> Swift.Void, failure: @escaping Purchasely.PLYErrorClosure)
  @objc dynamic public class func productController(for productVendorId: Swift.String, with presentationVendorId: Swift.String?) -> UIKit.UIViewController
  @available(*, deprecated, renamed: "productController")
  @objc dynamic public class func productController(for productVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, success: @escaping (UIKit.UIViewController) -> Swift.Void, failure: @escaping (Swift.Error?) -> Swift.Void)
  @objc dynamic public class func subscriptionsController() -> UIKit.UIViewController
  @objc dynamic public class func subscriptionController(for subscription: Purchasely.PLYSubscription) -> UIKit.UIViewController
  @objc public static func purchase(plan: Purchasely.PLYPlan, success: @escaping Purchasely.PLYVoidClosure, failure: @escaping Purchasely.PLYErrorClosure)
  @objc public static func restoreAllProducts(success: @escaping Purchasely.PLYVoidClosure, failure: @escaping Purchasely.PLYErrorClosure)
}
extension Purchasely : UserNotifications.UNUserNotificationCenterDelegate {
}
extension Purchasely : Purchasely.PLYUIDelegate {
  @objc dynamic public func display(controller: UIKit.UIViewController, type: Purchasely.PLYUIControllerType)
  @objc dynamic public func display(alert: Purchasely.PLYAlertMessage, error: Swift.Error?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Purchasely : ObjectiveC.NSObject {
  @objc deinit
}
public struct Safe<Base> : Swift.Decodable where Base : Swift.Decodable {
  public let value: Base?
  public init(from decoder: Swift.Decoder)
}
@available(iOS 11.0, tvOS 11.0, *)
extension SKProductStorePromotionController {
  public func resetStorePromotionsVisibility(for products: [StoreKit.SKProduct], completed: (() -> Swift.Void)?)
}
extension String {
  public func regexMatchGroup(_ pattern: Swift.String) -> [Swift.String]?
  public func regexMatch(_ pattern: Swift.String) -> Swift.Bool
}
extension Purchasely.PLYActionError : Swift.Equatable {}
extension Purchasely.PLYActionError : Swift.Hashable {}
extension Purchasely.PLYAlertMessage : Swift.Equatable {}
extension Purchasely.PLYAlertMessage : Swift.Hashable {}
extension Purchasely.PLYAlertMessage : Swift.RawRepresentable {}
extension Purchasely.PLYComponentError : Swift.Equatable {}
extension Purchasely.PLYComponentError : Swift.Hashable {}
extension Purchasely.PLYEnvironment : Swift.Equatable {}
extension Purchasely.PLYEnvironment : Swift.Hashable {}
extension Purchasely.PLYEnvironment : Swift.RawRepresentable {}
extension Purchasely.PLYEvent : Swift.Equatable {}
extension Purchasely.PLYEvent : Swift.Hashable {}
extension Purchasely.PLYEvent : Swift.RawRepresentable {}
extension Purchasely.PLYLabelHighlightsError : Swift.Equatable {}
extension Purchasely.PLYLabelHighlightsError : Swift.Hashable {}
extension Purchasely.PluralType : Swift.Equatable {}
extension Purchasely.PluralType : Swift.Hashable {}
extension Purchasely.PLYLogger.LogLevel : Swift.Equatable {}
extension Purchasely.PLYLogger.LogLevel : Swift.Hashable {}
extension Purchasely.PLYLogger.LogLevel : Swift.RawRepresentable {}
extension Purchasely.PLYSubscriptionSourceError : Swift.Equatable {}
extension Purchasely.PLYSubscriptionSourceError : Swift.Hashable {}
extension Purchasely.PLYSubscriptionSource : Swift.Equatable {}
extension Purchasely.PLYSubscriptionSource : Swift.Hashable {}
extension Purchasely.PLYSubscriptionSource : Swift.RawRepresentable {}
extension Purchasely.PLYUIControllerType : Swift.Equatable {}
extension Purchasely.PLYUIControllerType : Swift.Hashable {}
extension Purchasely.PLYUIControllerType : Swift.RawRepresentable {}
