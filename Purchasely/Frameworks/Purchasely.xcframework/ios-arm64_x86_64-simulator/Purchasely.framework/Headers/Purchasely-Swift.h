#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef PURCHASELY_SWIFT_H
#define PURCHASELY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Purchasely",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)



enum PLYEvent : NSInteger;

@interface NSString (SWIFT_EXTENSION(Purchasely))
+ (NSString * _Nonnull)fromPLYEvent:(enum PLYEvent)event SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PLYAlertMessage, open) {
  PLYAlertMessageCommonError = 0,
  PLYAlertMessageInAppSuccess = 1,
  PLYAlertMessageInAppDeferred = 2,
  PLYAlertMessageInAppSuccessUnauthentified = 3,
  PLYAlertMessageInAppRestorationSuccess = 4,
  PLYAlertMessageInAppRestorationError = 5,
  PLYAlertMessageInAppError = 6,
  PLYAlertMessageUnsubscribeGoogle = 7,
  PLYAlertMessageUnsubscribeiOS = 8,
  PLYAlertMessageUnsubscribeAmazon = 9,
};

typedef SWIFT_ENUM(NSInteger, PLYAppTechnology, open) {
  PLYAppTechnologyCordova = 0,
  PLYAppTechnologyFlutter = 1,
  PLYAppTechnologyNative = 2,
  PLYAppTechnologyMacCatalyst = 3,
  PLYAppTechnologyReactNative = 4,
  PLYAppTechnologyUnity = 5,
};


SWIFT_CLASS("_TtC10Purchasely11PLYCampaign")
@interface PLYCampaign : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC10Purchasely18PLYCampaignTrigger")
@interface PLYCampaignTrigger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, PLYCancellationReason, open) {
  PLYCancellationReasonPrice = 1,
  PLYCancellationReasonBetterApp = 2,
  PLYCancellationReasonNoLongerUseful = 3,
  PLYCancellationReasonNoUse = 4,
  PLYCancellationReasonTechnicalIssues = 5,
  PLYCancellationReasonOther = 6,
  PLYCancellationReasonUnknown = 7,
};

typedef SWIFT_ENUM(NSInteger, PLYCustomPropertyDataType, open) {
  PLYCustomPropertyDataTypeInt = 0,
  PLYCustomPropertyDataTypeFloat = 1,
  PLYCustomPropertyDataTypeString = 2,
  PLYCustomPropertyDataTypeDate = 3,
  PLYCustomPropertyDataTypeBool = 4,
};

typedef SWIFT_ENUM(NSInteger, PLYEnvironment, open) {
  PLYEnvironmentProd = 0,
  PLYEnvironmentStaging = 1,
};

typedef SWIFT_ENUM(NSInteger, PLYEvent, open) {
  PLYEventAppConfigured = 0,
  PLYEventAppInstalled = 1,
  PLYEventAppStarted = 2,
  PLYEventAppUpdated = 3,
  PLYEventCancellationReasonPublished = 4,
  PLYEventCarouselSlideSwiped = 5,
  PLYEventDeeplinkOpened = 6,
  PLYEventInAppDeferred = 7,
  PLYEventInAppPurchaseFailed = 8,
  PLYEventInAppPurchased = 9,
  PLYEventInAppPurchasing = 10,
  PLYEventInAppRenewed = 11,
  PLYEventInAppRestored = 12,
  PLYEventLinkOpened = 13,
  PLYEventLoginTapped = 14,
  PLYEventPlanSelected = 15,
  PLYEventPresentationOpened = 16,
  PLYEventPresentationSelected = 17,
  PLYEventPresentationViewed = 18,
  PLYEventPresentationLoaded = 19,
  PLYEventPromoCodeTapped = 20,
  PLYEventPurchaseCancelled = 21,
  PLYEventPurchaseCancelledByApp = 22,
  PLYEventPurchaseFromStoreTapped = 23,
  PLYEventPurchaseTapped = 24,
  PLYEventReceiptCreated = 25,
  PLYEventReceiptFailed = 26,
  PLYEventReceiptValidated = 27,
  PLYEventRestoreFailed = 28,
  PLYEventRestoreStarted = 29,
  PLYEventRestoreSucceeded = 30,
  PLYEventRestoreTapped = 31,
  PLYEventProductFetchError = 32,
  PLYEventSubscriptionCancelTapped = 33,
  PLYEventSubscriptionDetailsViewed = 34,
  PLYEventSubscriptionPlanTapped = 35,
  PLYEventSubscriptionsListViewed = 36,
  PLYEventSubscriptionsTransferred = 37,
  PLYEventUserLoggedIn = 38,
  PLYEventUserLoggedOut = 39,
  PLYEventPresentationClosed = 40,
  PLYEventSubscriptionContentUsed = 41,
  PLYEventOptionsSelected = 42,
  PLYEventOptionsValidated = 43,
};


SWIFT_PROTOCOL("_TtP10Purchasely16PLYEventDelegate_")
@protocol PLYEventDelegate
- (void)eventTriggered:(enum PLYEvent)event properties:(NSDictionary<NSString *, id> * _Nullable)properties;
@end

typedef SWIFT_ENUM(NSInteger, PLYEventProperty, open) {
  PLYEventPropertyTemplate = 0,
  PLYEventPropertySdkVersion = 1,
  PLYEventPropertyEventName = 2,
  PLYEventPropertyEventCreatedAtMs = 3,
  PLYEventPropertyEventCreated = 4,
  PLYEventPropertyEventCreatedAtMsOriginal = 5,
  PLYEventPropertyEventCreatedOriginal = 6,
  PLYEventPropertyDisplayedPresentation = 7,
  PLYEventPropertyIsFallbackPresentation = 8,
  PLYEventPropertyUserId = 9,
  PLYEventPropertyAnonymousUserId = 10,
  PLYEventPropertyPurchasablePlans = 11,
  PLYEventPropertyDeeplinkIdentifier = 12,
  PLYEventPropertySourceIdentifier = 13,
  PLYEventPropertySelectedPlan = 14,
  PLYEventPropertyPlan = 15,
  PLYEventPropertyPreviousSelectedPlan = 16,
  PLYEventPropertyLinkIdentifier = 17,
  PLYEventPropertyCarousels = 18,
  PLYEventPropertyDevice = 19,
  PLYEventPropertyOsVersion = 20,
  PLYEventPropertyType = 21,
  PLYEventPropertyErrorMessage = 22,
  PLYEventPropertyLanguage = 23,
  PLYEventPropertyPlanType = 24,
  PLYEventPropertyPurchaselyPlanId = 25,
  PLYEventPropertyStore = 26,
  PLYEventPropertyStoreCountry = 27,
  PLYEventPropertyStoreProductId = 28,
  PLYEventPropertyPriceInCustomerCurrency = 29,
  PLYEventPropertyCustomerCurrency = 30,
  PLYEventPropertyPeriod = 31,
  PLYEventPropertyDuration = 32,
  PLYEventPropertyIntroPriceInCustomerCurrency = 33,
  PLYEventPropertyIntroPeriod = 34,
  PLYEventPropertyIntroDuration = 35,
  PLYEventPropertyFreePeriod = 36,
  PLYEventPropertyFreeDuration = 37,
  PLYEventPropertyHasFreeTrial = 38,
  PLYEventPropertyPromotionalOfferPriceInCustomerCurrency = 39,
  PLYEventPropertyPromotionalOfferPeriod = 40,
  PLYEventPropertyPromotionalOfferDuration = 41,
  PLYEventPropertyDiscountReferent = 42,
  PLYEventPropertyDiscountPercentageComparisonToReferent = 43,
  PLYEventPropertyDiscountPriceComparisonToReferent = 44,
  PLYEventPropertyIsDefault = 45,
  PLYEventPropertySelectedSlide = 46,
  PLYEventPropertyNumberOfSlides = 47,
  PLYEventPropertyIsCarouselAutoPlaying = 48,
  PLYEventPropertyDefaultSlide = 49,
  PLYEventPropertyPreviousSlide = 50,
  PLYEventPropertySelectedProduct = 51,
  PLYEventPropertyPlanChangeType = 52,
  PLYEventPropertyCancellationReasonId = 53,
  PLYEventPropertyCancellationReason = 54,
  PLYEventPropertyRunningSubscriptions = 55,
  PLYEventPropertyProduct = 56,
  PLYEventPropertySelectedPresentation = 57,
  PLYEventPropertyPreviousSelectedPresentation = 58,
  PLYEventPropertyPlacementId = 59,
  PLYEventPropertyAudienceId = 60,
  PLYEventPropertyAbTestId = 61,
  PLYEventPropertyAbTestVariantId = 62,
  PLYEventPropertyContentId = 63,
  PLYEventPropertySessionDuration = 64,
  PLYEventPropertySessionCount = 65,
  PLYEventPropertyScreenDuration = 66,
  PLYEventPropertyScreenDisplayedAt = 67,
  PLYEventPropertyScreenDisplayedAtMs = 68,
  PLYEventPropertyAppInstalledAt = 69,
  PLYEventPropertyAppInstalledAtMs = 70,
  PLYEventPropertyPaywallrequestDurationInMs = 71,
  PLYEventPropertyStoreKitVersion = 72,
  PLYEventPropertyPresentationType = 73,
  PLYEventPropertyPromoOffer = 74,
  PLYEventPropertyOrientation = 75,
  PLYEventPropertySessionId = 76,
  PLYEventPropertySelectedOptionId = 77,
  PLYEventPropertySelectedOptions = 78,
  PLYEventPropertyDisplayedOptions = 79,
  PLYEventPropertyCampaignId = 80,
};

typedef SWIFT_ENUM(NSInteger, PLYEventType, open) {
  PLYEventTypePromotedIAP = 0,
  PLYEventTypePaywallUserBehavior = 1,
  PLYEventTypePayment = 2,
  PLYEventTypeSDKEvents = 3,
  PLYEventTypeReceipts = 4,
  PLYEventTypeCancellation = 5,
  PLYEventTypeRestorePurchase = 6,
  PLYEventTypeSubscriptionTransfer = 7,
  PLYEventTypeLogin = 8,
  PLYEventTypePhoneSettings = 9,
};

enum PLYLogLevel : NSInteger;

SWIFT_CLASS("_TtC10Purchasely9PLYLogger")
@interface PLYLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)logWithMessage:(NSString * _Nonnull)message level:(enum PLYLogLevel)level;
@end

typedef SWIFT_ENUM(NSInteger, PLYLogLevel, open) {
  PLYLogLevelDebug = 0,
  PLYLogLevelInfo = 1,
  PLYLogLevelWarn = 2,
  PLYLogLevelError = 3,
};


@class PLYMessage;

/// Protocol used to forward logged messages to any object.
SWIFT_PROTOCOL("_TtP10Purchasely10PLYLogging_")
@protocol PLYLogging
- (void)messageLoggedWithMessage:(PLYMessage * _Nonnull)message;
@end


SWIFT_CLASS("_TtC10Purchasely10PLYMessage")
@interface PLYMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;

SWIFT_CLASS("_TtC10Purchasely17PLYOfferSignature")
@interface PLYOfferSignature : NSObject
@property (nonatomic, copy) NSString * _Nonnull planVendorId;
@property (nonatomic, copy) NSString * _Nonnull identifier;
@property (nonatomic, copy) NSString * _Nonnull signature;
@property (nonatomic, copy) NSUUID * _Nonnull nonce;
@property (nonatomic, copy) NSString * _Nonnull keyIdentifier;
@property (nonatomic) double timestamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSArray;

SWIFT_CLASS("_TtC10Purchasely11PLYOffering")
@interface PLYOffering : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull reference;
@property (nonatomic, readonly, copy) NSString * _Nonnull planId;
@property (nonatomic, readonly, copy) NSString * _Nullable offerId;
- (nonnull instancetype)initWithReference:(NSString * _Nonnull)reference planId:(NSString * _Nonnull)planId offerId:(NSString * _Nullable)offerId OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (NSString * _Nullable)toJsonStringFromArray:(NSArray * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PLYPlanType : NSInteger;
@class PLYPromoOffer;

SWIFT_CLASS("_TtC10Purchasely7PLYPlan")
@interface PLYPlan : NSObject
@property (nonatomic, copy) NSString * _Nonnull vendorId;
@property (nonatomic, copy) NSString * _Nullable appleProductId;
@property (nonatomic) enum PLYPlanType type;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSArray<PLYPromoOffer *> * _Nonnull promoOffers;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@interface PLYPlan (SWIFT_EXTENSION(Purchasely))
- (NSString * _Nullable)priceDifferenceWithComparedTo:(PLYPlan * _Nonnull)plan SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)priceDifferenceInPercentageTo:(PLYPlan * _Nonnull)plan SWIFT_WARN_UNUSED_RESULT;
@end


@interface PLYPlan (SWIFT_EXTENSION(Purchasely))
/// This attribute is used to check if current user is eligible for introductory offer for current plan
/// <ul>
///   <li>
///     Completion:
///   </li>
///   <li>
///     Bool: true if user is eligible. False if not, or if receipt cannot be decoded.
///   </li>
/// </ul>
- (void)isUserEligibleForIntroductoryOfferWithCompletion:(void (^ _Nonnull)(BOOL))completion;
@end

@class NSDecimalNumber;

@interface PLYPlan (SWIFT_EXTENSION(Purchasely))
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable amount;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable introAmount;
@property (nonatomic, readonly, copy) NSString * _Nullable period;
@property (nonatomic, readonly, copy) NSString * _Nullable apiPeriod;
@property (nonatomic, readonly) NSInteger duration;
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
@property (nonatomic, readonly, copy) NSString * _Nullable currencySymbol;
- (NSString * _Nullable)localizedFullPriceWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedPriceWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedPeriodWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL hasIntroductoryPrice;
@property (nonatomic, readonly) BOOL hasPromoOffers;
@property (nonatomic, readonly) BOOL hasFreeTrial;
- (NSString * _Nullable)localizedFullIntroductoryPriceWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedIntroductoryPriceWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedIntroductoryPeriodWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)introductoryPeriodWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedIntroductoryDurationWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)introductoryDurationWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PLYPlanType, open) {
  PLYPlanTypeConsumable = 0,
  PLYPlanTypeNonConsumable = 1,
  PLYPlanTypeAutoRenewingSubscription = 2,
  PLYPlanTypeNonRenewingSubscription = 3,
  PLYPlanTypeUnknown = 4,
};

enum PLYPresentationType : NSInteger;
@class PLYPresentationViewController;
@class PLYPresentationPlan;
@class PLYPresentationMetadata;
@class UIColor;

SWIFT_CLASS("_TtC10Purchasely15PLYPresentation")
@interface PLYPresentation : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
@property (nonatomic, readonly, copy) NSString * _Nullable placementId;
@property (nonatomic, readonly, copy) NSString * _Nullable audienceId;
@property (nonatomic, readonly, copy) NSString * _Nullable abTestId;
@property (nonatomic, readonly, copy) NSString * _Nullable abTestVariantId;
@property (nonatomic, readonly, copy) NSString * _Nullable campaignId;
@property (nonatomic, readonly) enum PLYPresentationType type;
@property (nonatomic, readonly, strong) PLYPresentationViewController * _Nullable controller;
@property (nonatomic, readonly, copy) NSArray<PLYPresentationPlan *> * _Nonnull plans;
@property (nonatomic, readonly, strong) PLYPresentationMetadata * _Nullable metadata;
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, readonly) NSInteger height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PLYPresentationAction, open) {
  PLYPresentationActionClose = 0,
  PLYPresentationActionLogin = 1,
  PLYPresentationActionNavigate = 2,
  PLYPresentationActionPurchase = 3,
  PLYPresentationActionRestore = 4,
  PLYPresentationActionOpenPresentation = 5,
  PLYPresentationActionOpenPlacement = 6,
  PLYPresentationActionPromoCode = 7,
};

@class NSURL;

SWIFT_CLASS("_TtC10Purchasely31PLYPresentationActionParameters")
@interface PLYPresentationActionParameters : NSObject
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) PLYPlan * _Nullable plan;
@property (nonatomic, strong) PLYPromoOffer * _Nullable promoOffer;
@property (nonatomic, copy) NSString * _Nullable presentation;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

SWIFT_CLASS("_TtC10Purchasely19PLYPresentationInfo")
@interface PLYPresentationInfo : NSObject
/// <code>controller</code> parameter represents current paywall controller displayed, <code>nil</code> if purchase was made manually.
@property (nonatomic, strong) UIViewController * _Nullable controller;
/// <code>contentId</code> parameter represents contentId associated with current paywall controller
@property (nonatomic, copy) NSString * _Nullable contentId;
/// <code>presentationId</code> parameter represents current paywall presentation id
@property (nonatomic, copy) NSString * _Nullable presentationId;
/// <code>placementId</code> parameter represents current placement id
@property (nonatomic, copy) NSString * _Nullable placementId;
/// <code>audienceId</code> parameter represents current audience id
@property (nonatomic, copy) NSString * _Nullable audienceId;
/// <code>abTestVariantId</code> parameter represents current variant id when A/B testing
@property (nonatomic, copy) NSString * _Nullable abTestVariantId;
/// <code>abTestId</code> parameter represents current A/B test Id
@property (nonatomic, copy) NSString * _Nullable abTestId;
/// <code>campaignId</code> parameter represents campaign Id
@property (nonatomic, copy) NSString * _Nullable campaignId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10Purchasely23PLYPresentationMetadata")
@interface PLYPresentationMetadata : NSObject
- (void)getStringWith:(NSString * _Nonnull)key completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (NSArray<NSString *> * _Nonnull)getKeys SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)getRawMetadata SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10Purchasely19PLYPresentationPlan")
@interface PLYPresentationPlan : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable planVendorId;
@property (nonatomic, readonly, copy) NSString * _Nullable storeProductId;
@property (nonatomic, readonly, copy) NSString * _Nullable offerId;
@property (nonatomic, readonly, copy) NSString * _Nullable offerVendorId;
@property (nonatomic, readonly, getter=default) BOOL default_;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, PLYPresentationType, open) {
  PLYPresentationTypeNormal = 0,
  PLYPresentationTypeFallback = 1,
  PLYPresentationTypeDeactivated = 2,
  PLYPresentationTypeClient = 3,
};

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC10Purchasely29PLYPresentationViewController")
@interface PLYPresentationViewController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface PLYPresentationViewController (SWIFT_EXTENSION(Purchasely))
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@end


SWIFT_CLASS("_TtC10Purchasely10PLYProduct")
@interface PLYProduct : NSObject
@property (nonatomic, copy) NSString * _Nonnull vendorId;
@property (nonatomic, copy) NSArray<PLYPlan *> * _Nonnull plans;
@property (nonatomic, copy) NSString * _Nullable name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, PLYProductViewControllerResult, open) {
  PLYProductViewControllerResultPurchased = 0,
  PLYProductViewControllerResultCancelled = 1,
  PLYProductViewControllerResultRestored = 2,
};


SWIFT_CLASS("_TtC10Purchasely13PLYPromoOffer")
@interface PLYPromoOffer : NSObject
@property (nonatomic, copy) NSString * _Nonnull vendorId;
@property (nonatomic, copy) NSString * _Nonnull storeOfferId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, PLYRunningMode, open) {
  PLYRunningModeTransactionOnly = 0,
  PLYRunningModeObserver = 1,
  PLYRunningModePaywallObserver = 2,
  PLYRunningModeFull = 3,
};

enum PLYSubscriptionSource : NSInteger;
@class NSDate;
enum PLYSubscriptionOfferType : NSInteger;
enum PLYSubscriptionStatus : NSInteger;
enum PLYSubscriptionEnvironment : NSInteger;

SWIFT_CLASS("_TtC10Purchasely15PLYSubscription")
@interface PLYSubscription : NSObject
@property (nonatomic, strong) PLYProduct * _Nonnull product;
@property (nonatomic, strong) PLYPlan * _Nonnull plan;
@property (nonatomic) enum PLYSubscriptionSource subscriptionSource;
@property (nonatomic, copy) NSDate * _Nullable nextRenewalDate;
@property (nonatomic, copy) NSDate * _Nullable cancelledDate;
@property (nonatomic, copy) NSDate * _Nullable originalPurchasedDate;
@property (nonatomic, copy) NSDate * _Nullable purchasedDate;
@property (nonatomic) enum PLYSubscriptionOfferType offerType;
@property (nonatomic) enum PLYSubscriptionStatus status;
@property (nonatomic) enum PLYSubscriptionEnvironment environment;
@property (nonatomic, copy) NSString * _Nullable storeCountry;
@property (nonatomic) BOOL isFamilyShared;
@property (nonatomic, copy) NSString * _Nullable contentId;
@property (nonatomic, copy) NSString * _Nullable offerIdentifier;
@property (nonatomic) float cumulatedRevenuesInUsd;
@property (nonatomic) NSInteger subscriptionDurationInDays;
@property (nonatomic) NSInteger subscriptionDurationInWeeks;
@property (nonatomic) NSInteger subscriptionDurationInMonths;
- (void)unsubscribe;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, PLYSubscriptionEnvironment, open) {
  PLYSubscriptionEnvironmentSandbox = 0,
  PLYSubscriptionEnvironmentProduction = 1,
  PLYSubscriptionEnvironmentUnknown = 2,
};

typedef SWIFT_ENUM(NSInteger, PLYSubscriptionOfferType, open) {
  PLYSubscriptionOfferTypeNone = 0,
  PLYSubscriptionOfferTypeFreeTrial = 1,
  PLYSubscriptionOfferTypeIntroOffer = 2,
  PLYSubscriptionOfferTypePromoCode = 3,
  PLYSubscriptionOfferTypePromotionalOffer = 4,
};

typedef SWIFT_ENUM(NSInteger, PLYSubscriptionSource, open) {
  PLYSubscriptionSourceAppleAppStore = 0,
  PLYSubscriptionSourceGooglePlayStore = 1,
  PLYSubscriptionSourceAmazonAppstore = 2,
  PLYSubscriptionSourceHuaweiAppGallery = 3,
  PLYSubscriptionSourceNone = 4,
};

typedef SWIFT_ENUM(NSInteger, PLYSubscriptionStatus, open) {
  PLYSubscriptionStatusAutoRenewing = 0,
  PLYSubscriptionStatusOnHold = 1,
  PLYSubscriptionStatusInGracePeriod = 2,
  PLYSubscriptionStatusAutoRenewingCanceled = 3,
  PLYSubscriptionStatusDeactivated = 4,
  PLYSubscriptionStatusRevoked = 5,
  PLYSubscriptionStatusPaused = 6,
  PLYSubscriptionStatusUnpaid = 7,
  PLYSubscriptionStatusUnknown = 8,
};

typedef SWIFT_ENUM(NSInteger, PLYUIControllerType, open) {
  PLYUIControllerTypeSubscriptionList = 0,
  PLYUIControllerTypeProductPage = 1,
  PLYUIControllerTypeWebPage = 2,
  PLYUIControllerTypeCancellationSurvey = 3,
};


SWIFT_PROTOCOL("_TtP10Purchasely12PLYUIHandler_")
@protocol PLYUIHandler
@optional
- (void)displayWithPresentation:(PLYPresentation * _Nonnull)presentation from:(UIViewController * _Nullable)sourceController proceed:(void (^ _Nonnull)(void))proceed;
- (void)displayWithAlert:(enum PLYAlertMessage)alert with:(NSError * _Nullable)error proceed:(void (^ _Nonnull)(void))proceed;
@end

enum PLYUserAttributeType : NSInteger;
enum PLYUserAttributeSource : NSInteger;

SWIFT_PROTOCOL("_TtP10Purchasely24PLYUserAttributeDelegate_")
@protocol PLYUserAttributeDelegate
@optional
- (void)onUserAttributeSetWithKey:(NSString * _Nonnull)key type:(enum PLYUserAttributeType)type value:(id _Nullable)value source:(enum PLYUserAttributeSource)source;
- (void)onUserAttributeRemovedWithKey:(NSString * _Nonnull)key source:(enum PLYUserAttributeSource)source;
@end

typedef SWIFT_ENUM(NSInteger, PLYUserAttributeSource, open) {
  PLYUserAttributeSourcePurchasely = 0,
  PLYUserAttributeSourceClient = 1,
};

typedef SWIFT_ENUM(NSInteger, PLYUserAttributeType, open) {
  PLYUserAttributeTypeString = 0,
  PLYUserAttributeTypeBool = 1,
  PLYUserAttributeTypeInt = 2,
  PLYUserAttributeTypeDouble = 3,
  PLYUserAttributeTypeDate = 4,
  PLYUserAttributeTypeStringArray = 5,
  PLYUserAttributeTypeIntArray = 6,
  PLYUserAttributeTypeDoubleArray = 7,
  PLYUserAttributeTypeBoolArray = 8,
  PLYUserAttributeTypeDictionary = 9,
  PLYUserAttributeTypeUnknown = 10,
};


/// This class manages the In App purchase process from grabbing the product details to performing
/// the purchase and sending the receipts to the server.
/// This manager is also meant to be used for restoration
SWIFT_CLASS("_TtC10Purchasely10Purchasely")
@interface Purchasely : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Purchasely (SWIFT_EXTENSION(Purchasely)) <UNUserNotificationCenterDelegate>
@end

















@interface Purchasely (SWIFT_EXTENSION(Purchasely))
+ (void)showController:(UIViewController * _Nonnull)controller type:(enum PLYUIControllerType)type from:(UIViewController * _Nullable)sourceViewController;
@end




@class StorekitSettings;
@class NSLocale;
enum PLYAttribute : NSInteger;
enum PLYThemeMode : NSInteger;

@interface Purchasely (SWIFT_EXTENSION(Purchasely))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull anonymousUserId;)
+ (NSString * _Nonnull)anonymousUserId SWIFT_WARN_UNUSED_RESULT;
/// Sets the SDK to point to a client
/// This must be called in <code>didFinishLaunchingWithOptions</code> to handle the receipts sent on startup
+ (void)startWithAPIKey:(NSString * _Nonnull)apiKey appUserId:(NSString * _Nullable)appUserId runningMode:(enum PLYRunningMode)runningMode paywallActionsInterceptor:(void (^ _Nullable)(enum PLYPresentationAction, PLYPresentationActionParameters * _Nullable, PLYPresentationInfo * _Nullable, void (^ _Nonnull)(BOOL)))paywallActionsInterceptor storekitSettings:(StorekitSettings * _Nonnull)storekitSettings logLevel:(enum PLYLogLevel)logLevel initialized:(void (^ _Nullable)(BOOL, NSError * _Nullable))initialized;
+ (NSString * _Nullable)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setUIHandler:(id <PLYUIHandler> _Nullable)uiHandler;
+ (void)setUserAttributeDelegate:(id <PLYUserAttributeDelegate> _Nonnull)userAttributeDelegate;
/// This function is used to set a handler that is called when a user
/// makes an action in a paywall to give a chance to the app to intercept it
/// and act or let Purchasely deal with it (or both).
/// This can be done to
/// <ul>
///   <li>
///     Display terms and conditions that must be read and accepted before purchasing
///   </li>
///   <li>
///     Overrule the tap on a purchase button to use your own purchase system
///   </li>
///   <li>
///     (on kids app) make sure a parent is using the phone before opening Safari or showing Promo code sheet which is required by the App Store guidelines
///   </li>
/// </ul>
/// The handler gives you:
/// <ul>
///   <li>
///     <code>action</code>, a <code>PLYPresentationAction</code> enum describing the type
///   </li>
///   <li>
///     <code>parameters</code>, a dictionary with the parameters of the action (for Objective-C compliance it is not in the enum)
///   </li>
///   <li>
///     <code>controller</code>, the <code>UIViewController</code> used to display something above (like an error message) or dismiss it
///   </li>
///   <li>
///     <code>processAction</code> a completion handler parametered with a BOOL telling if Purchasely should process the action itself or ignore it.
///   </li>
/// </ul>
+ (void)setPaywallActionsInterceptor:(void (^ _Nullable)(enum PLYPresentationAction, PLYPresentationActionParameters * _Nullable, PLYPresentationInfo * _Nullable, void (^ _Nonnull)(BOOL)))paywallActionsInterceptor;
+ (void)userLoginWith:(NSString * _Nonnull)appUserId;
+ (void)userLoginWith:(NSString * _Nonnull)appUserId shouldRefresh:(void (^ _Nullable)(BOOL))shouldRefresh;
+ (void)userLogout:(BOOL)clearUserAttributes;
+ (BOOL)isAnonymous SWIFT_WARN_UNUSED_RESULT;
/// This function sets a handler that is triggered once the purchase controller is dismissed.
/// It provides the output of the action (cancel, purchase, restore).
/// You can use it for your tracking or to decide if you want to display something post purchase.
/// You can override this handler by providing a different completion handler
/// in the <code>productController(for:with:completion:)</code> method.
/// This method is particularly helpful to get the result from controllers you didn’t indtanciate yourself
/// like Promoted In-App Purchases or product controllers displayed by deeplinks.
/// \param defaultPresentationResultHandler the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///
+ (void)setDefaultPresentationResultHandler:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))defaultPresentationResultHandler;
/// You can force a language for the SDK including error messages and paywall.
/// The language passed must be ISO 639-1 or ISO 639-2
+ (void)setLanguageFrom:(NSLocale * _Nullable)locale;
+ (void)readyToOpenDeeplink:(BOOL)ready;
+ (void)setEnvironment:(enum PLYEnvironment)environment;
+ (void)setLogLevel:(enum PLYLogLevel)logLevel;
+ (void)setAppTechnology:(enum PLYAppTechnology)technology;
+ (void)setSdkBridgeVersion:(NSString * _Nullable)sdkBridgeVersion;
+ (void)addLogger:(id <PLYLogging> _Nonnull)logger;
+ (void)allProductsWithSuccess:(void (^ _Nonnull)(NSArray<PLYProduct *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
+ (void)productWith:(NSString * _Nonnull)vendorId success:(void (^ _Nonnull)(PLYProduct * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// Fetches plan details asynchronously using your custom vendor identifier.
/// This method retrieves the specific <code>PLYPlan</code> object associated with the unique vendor ID you provide.
/// The result is delivered via the corresponding success or failure callback.
/// \param vendorId Your custom identifier for the desired plan (defined in your backend or configuration).
///
/// \param success The closure invoked upon successful retrieval of the plan. It receives the <code>PLYPlan</code> object.
///
/// \param failure The closure invoked if an error occurs during retrieval (e.g., plan not found for the given vendorId, network error). It receives an optional <code>Error</code> object describing the issue.
///
+ (void)planWith:(NSString * _Nonnull)vendorId success:(void (^ _Nonnull)(PLYPlan * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// Fetches plan details asynchronously using the App Store Product ID (SKU).
/// This method retrieves the specific <code>PLYPlan</code> object associated with the provided App Store Product ID (often referred to as SKU).
/// The result is delivered via the corresponding success or failure callback.
/// \param sku The App Store Product ID (SKU) for the desired plan.
///
/// \param success The closure invoked upon successful retrieval of the plan. It receives the <code>PLYPlan</code> object.
///
/// \param failure The closure invoked if an error occurs during retrieval (e.g., plan not found for the given SKU, network error). It receives an optional <code>Error</code> object describing the issue.
///
+ (void)planFor:(NSString * _Nonnull)sku success:(void (^ _Nonnull)(PLYPlan * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
+ (void)userSubscriptionsHistory:(BOOL)invalidateCache success:(void (^ _Nonnull)(NSArray<PLYSubscription *> * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
+ (void)userSubscriptions:(BOOL)invalidateCache success:(void (^ _Nonnull)(NSArray<PLYSubscription *> * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method returns a presentation for a specific product. If no presentationVendorId is set (or an invalid one)
/// the product default presentation will be displayed. If none has been set it will fallback to the app default presentation.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     productVendorId: the vendorId of the product to show
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     contentId: (optional) an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)productControllerFor:(NSString * _Nonnull)productVendorId with:(NSString * _Nullable)presentationVendorId contentId:(NSString * _Nullable)contentId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific product. If no presentationVendorId is set (or an invalid one)
/// the product default presentation will be displayed. If none has been set it will fallback to the app default presentation.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     productVendorId: the vendorId of the product to show
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)productControllerFor:(NSString * _Nonnull)productVendorId with:(NSString * _Nullable)presentationVendorId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific plan. If no presentationVendorId is set (or an invalid one)
/// the plan default presentation will be displayed. If none has been set it will fallback to the app default presentation.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     planVendorId: the vendorId of the product to show
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     contentId: (optional) an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)planControllerFor:(NSString * _Nonnull)planVendorId with:(NSString * _Nullable)presentationVendorId contentId:(NSString * _Nullable)contentId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific plan. If no presentationVendorId is set (or an invalid one)
/// the plan default presentation will be displayed. If none has been set it will fallback to the app default presentation.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     planVendorId: the vendorId of the product to show
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)planControllerFor:(NSString * _Nonnull)planVendorId with:(NSString * _Nullable)presentationVendorId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation with a specific vendorId. If no presentationVendorId is set (or an invalid one)
/// the app default presentation will be displayed.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     contentId: an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)presentationControllerWith:(NSString * _Nullable)presentationVendorId contentId:(NSString * _Nullable)contentId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation with a specific vendorId. If no presentationVendorId is set (or an invalid one)
/// the app default presentation will be displayed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)presentationControllerWith:(NSString * _Nullable)presentationVendorId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific placement Id.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     placementId: the placementId identifying where the user was in your app
///   </li>
///   <li>
///     contentId: an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)presentationControllerFor:(NSString * _Nonnull)placementId contentId:(NSString * _Nullable)contentId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific placement Id.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     placementId: the placementId of a group of presentations
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (UIViewController * _Nullable)presentationControllerFor:(NSString * _Nonnull)placementId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method loads a presentation for a specific placement Id.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     contentId: an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     fetchCompletion: block called when presentation has been loaded and is ready to be displayed.
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (void)fetchPresentationWith:(NSString * _Nullable)presentationVendorId contentId:(NSString * _Nullable)contentId fetchCompletion:(void (^ _Nullable)(PLYPresentation * _Nullable, NSError * _Nullable))fetchCompletion completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion loadedCompletion:(void (^ _Nullable)(void))loadedCompletion;
/// This method loads a presentation for a specific presentation Id.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     fetchCompletion: block called when presentation has been loaded and is ready to be displayed.
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (void)fetchPresentationWith:(NSString * _Nullable)presentationVendorId fetchCompletion:(void (^ _Nullable)(PLYPresentation * _Nullable, NSError * _Nullable))fetchCompletion completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion loadedCompletion:(void (^ _Nullable)(void))loadedCompletion;
/// This method loads a presentation for a specific placement Id.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     placementId: the placementId identifying where the user was in your app
///   </li>
///   <li>
///     fetchCompletion: block called when presentation has been loaded and is ready to be displayed.
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (void)fetchPresentationFor:(NSString * _Nonnull)placementId fetchCompletion:(void (^ _Nullable)(PLYPresentation * _Nullable, NSError * _Nullable))fetchCompletion completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion loadedCompletion:(void (^ _Nullable)(void))loadedCompletion;
/// This method loads a presentation for a specific placement Id.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     placementId: the placementId identifying where the user was in your app
///   </li>
///   <li>
///     contentId: an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     fetchCompletion: block called when presentation has been loaded and is ready to be displayed.
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (void)fetchPresentationFor:(NSString * _Nonnull)placementId contentId:(NSString * _Nullable)contentId fetchCompletion:(void (^ _Nullable)(PLYPresentation * _Nullable, NSError * _Nullable))fetchCompletion completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion loadedCompletion:(void (^ _Nullable)(void))loadedCompletion;
/// This method closes the current paywall displayed
+ (void)closeDisplayedPresentation;
/// This method is used to notify Purchasely that a client paywall has been opened.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentation: The presentation fetched with <code>fetchPresentation</code> method.
///   </li>
/// </ul>
+ (void)clientPresentationOpenedWith:(PLYPresentation * _Nullable)presentation;
/// This method is used to notify Purchasely that a client paywall has been closed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentation: The presentation fetched with <code>fetchPresentation</code> method.
///   </li>
/// </ul>
+ (void)clientPresentationClosedWith:(PLYPresentation * _Nullable)presentation;
+ (UIViewController * _Nullable)subscriptionsController SWIFT_WARN_UNUSED_RESULT;
+ (UIViewController * _Nullable)subscriptionControllerFor:(PLYSubscription * _Nonnull)subscription SWIFT_WARN_UNUSED_RESULT;
+ (UIViewController * _Nonnull)cancellationSurveyControllerFor:(PLYProduct * _Nullable)product selected:(void (^ _Nonnull)(enum PLYCancellationReason))selected SWIFT_WARN_UNUSED_RESULT;
/// Sets a delegate callback to receive all events tracked by the SDK. This allows integrators to observe and react to events happening within the SDK.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     event: The <code>PLYEvent</code> that was tracked. This enum provides information about the type of event.
///   </li>
///   <li>
///     parameters: An optional dictionary containing additional parameters associated with the event. This can provide more context about the event.
///   </li>
/// </ul>
/// \param callback A closure that will be called whenever an event is tracked.
///
+ (void)setEventDelegate:(void (^ _Nonnull)(enum PLYEvent, NSDictionary<NSString *, id> * _Nullable))callback;
/// This method must be called inside the AppDelegate open url method or SceneDelegate willConnectTo and openURLContexts
/// Check the documentation: https://docs.purchasely.com/advanced-features/deeplinks-and-automations
/// The controller will be displayed above the current controller.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     url: the URL of the deeplink to open
///   </li>
/// </ul>
+ (BOOL)isDeeplinkHandledWithDeeplink:(NSURL * _Nonnull)url;
/// This method performs a Promotional Offer signature with StoreKit 2
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     plan: the PLYPlan that you setup in Purchasely admin
///   </li>
///   <li>
///     promoOffer: the PLYPromoOffer corresponding of the promotional offer that you setup in Purchasely admin and that is referring to your AppStore Connect promotional offers setup.
///   </li>
///   <li>
///     success: the block called when the signature was completed from end to end
///   </li>
///   <li>
///     failure: the block called when any error occured. The error can be displayed to the user using localizedDescription
///   </li>
/// </ul>
+ (void)signPromotionalOfferWithPlan:(PLYPlan * _Nonnull)plan promoOffer:(PLYPromoOffer * _Nonnull)promoOffer success:(void (^ _Nonnull)(PLYOfferSignature * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_AVAILABILITY(watchos,introduced=8.0) SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(macos,introduced=12.0) SWIFT_AVAILABILITY(ios,introduced=12.2);
/// This method performs a Promotional Offer signature with StoreKit 2
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     storeProductId: Apple’s ProductId for the item purchased
///   </li>
///   <li>
///     storeOfferId: the promotional offer’s identifier referring to your AppStore Connect promotional offers setup.
///   </li>
///   <li>
///     success: the block called when the signature was completed from end to end
///   </li>
///   <li>
///     failure: the block called when any error occured. The error can be displayed to the user using localizedDescription
///   </li>
/// </ul>
+ (void)signPromotionalOfferWithStoreProductId:(NSString * _Nonnull)storeProductId storeOfferId:(NSString * _Nonnull)storeOfferId success:(void (^ _Nonnull)(PLYOfferSignature * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_AVAILABILITY(watchos,introduced=8.0) SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(macos,introduced=12.0) SWIFT_AVAILABILITY(ios,introduced=12.2);
/// This method performs a purchase on an plan of a Purchasely product
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     plan: the PLYPlan that you setup in Purchasely admin
///   </li>
///   <li>
///     success: the block called when the purchase was completed from end to end
///   </li>
///   <li>
///     contentId: (optional) an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     failure: the block called when any error occured. The error can be displayed to the user using localizedDescription
///   </li>
/// </ul>
+ (void)purchaseWithPlan:(PLYPlan * _Nonnull)plan contentId:(NSString * _Nullable)contentId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method performs a purchase on an plan of a Purchasely product.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     plan: the PLYPlan that you setup in Purchasely admin
///   </li>
///   <li>
///     success: the block called when the purchase was completed from end to end
///   </li>
///   <li>
///     failure: the block called when any error occured. The error can be displayed to the user using localizedDescription
///   </li>
/// </ul>
+ (void)purchaseWithPlan:(PLYPlan * _Nonnull)plan success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method performs a purchase on an plan of a Purchasely product with specified Promotional Offer
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     plan: the PLYPlan that you setup in Purchasely admin
///   </li>
///   <li>
///     contentId: (optional) an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     storeOfferId: the promotional offer’s identifier referring to your AppStore Connect promotional offers setup.
///   </li>
///   <li>
///     success: the block called when the purchase was completed from end to end
///   </li>
///   <li>
///     failure: the block called when any error occured. The error can be displayed to the user using localizedDescription
///   </li>
/// </ul>
+ (void)purchaseWithPromotionalOfferWithPlan:(PLYPlan * _Nonnull)plan contentId:(NSString * _Nullable)contentId storeOfferId:(NSString * _Nonnull)storeOfferId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_AVAILABILITY(watchos,introduced=8.0) SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(macos,introduced=12.0) SWIFT_AVAILABILITY(ios,introduced=12.2);
/// <em>Mode: Observer, PaywallObserver</em>
/// This method <em>must</em> be called right after a purchase is made using an SDK that is using StoreKit2, but you don’t have direct access to <em>Product.PurchaseResult</em>, in order for our back-end to synchronize this transaction for the current user.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     productId: Apple’s ProductId for the item purchased
///   </li>
///   <li>
///     an error is thrown if transaction cannot be verified by Apple, or if an error occurs when synchronizing with our back-end.
///   </li>
/// </ul>
///
/// throws:
///
+ (void)syncPurchaseFor:(NSString * _Nonnull)productId completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(watchos,introduced=8.0) SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(macos,introduced=12.0) SWIFT_AVAILABILITY(ios,introduced=15.0);
/// This method is used to restore previous purchases. Some might be successful and some in error.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     success: The closure that is called when at least one item was successfully restored. It might contain an error in case some items weren’t restored successfully.
///   </li>
///   <li>
///     failure: The closure that is called when at no item was restored
///   </li>
/// </ul>
+ (void)restoreAllProductsWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method is used to synchronize previous purchases with our backend. Some might be successful and some in error.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     success: The closure that is called when at least one item was successfully synchronized. It might contain an error in case some items weren’t restored successfully.
///   </li>
///   <li>
///     failure: The closure that is called when no item was synchronized
///   </li>
/// </ul>
+ (void)synchronizeWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Retrieves all currently collected built-in attributes.
///
/// returns:
/// A dictionary containing the built-in attributes, where the keys are the attribute names (String) and the values are the corresponding attribute values (Any).
+ (NSDictionary<NSString *, id> * _Nonnull)getBuiltInAttributes SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a specific built-in attribute by its key.
/// \param key The key of the built-in attribute to retrieve.
///
///
/// returns:
/// The value of the built-in attribute associated with the given key, or nil if the attribute does not exist.
+ (id _Nullable)getBuiltInAttributeWith:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// A dictionary of all user attributes currently stored.
/// Use this to inspect all attributes previously set for the user (e.g., name, age, is_premium).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDictionary<NSString *, id> * _Nonnull userAttributes;)
+ (NSDictionary<NSString *, id> * _Nonnull)userAttributes SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a specific user attribute value by its key.
/// Example: <code>getUserAttribute(for: "age")</code>
/// \param key The key of the user attribute you want to retrieve.
///
///
/// returns:
/// The attribute value if found, otherwise <code>nil</code>.
+ (id _Nullable)getUserAttributeFor:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Sets a string-type user attribute.
/// Example: <code>setUserAttribute(withStringValue: "Gold", forKey: "subscription_tier")</code>
/// \param value The string value to associate with the key.
///
/// \param key The key under which the attribute is stored.
///
+ (void)setUserAttributeWithStringValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Sets an integer-type user attribute.
/// Example: <code>setUserAttribute(withIntValue: 28, forKey: "age")</code>
/// \param value The integer value to store.
///
/// \param key The key under which to save the attribute.
///
+ (void)setUserAttributeWithIntValue:(NSInteger)value forKey:(NSString * _Nonnull)key;
/// Sets a double-type user attribute.
/// Example: <code>setUserAttribute(withDoubleValue: 99.99, forKey: "total_spent")</code>
/// \param value The double value to store.
///
/// \param key The key under which to save the attribute.
///
+ (void)setUserAttributeWithDoubleValue:(double)value forKey:(NSString * _Nonnull)key;
/// Sets a date-type user attribute.
/// Example: <code>setUserAttribute(withDateValue: Date(), forKey: "signup_date")</code>
/// \param value The <code>Date</code> to store.
///
/// \param key The key under which to save the attribute.
///
+ (void)setUserAttributeWithDateValue:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Sets a boolean-type user attribute.
/// Example: <code>setUserAttribute(withBoolValue: true, forKey: "is_premium")</code>
/// \param value The boolean value to store.
///
/// \param key The key under which to save the attribute.
///
+ (void)setUserAttributeWithBoolValue:(BOOL)value forKey:(NSString * _Nonnull)key;
/// Sets a user attribute with an array of boolean values for the given key.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     value: An array of boolean values to set for the attribute.
///   </li>
///   <li>
///     key: The key associated with the user attribute. This key will be used to identify and retrieve the attribute.
///   </li>
/// </ul>
+ (void)setUserAttributeWithBoolArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Sets a user attribute with an array of integer values for the given key.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     value: An array of integer values to set for the attribute.
///   </li>
///   <li>
///     key: The key associated with the user attribute. This key will be used to identify and retrieve the attribute.
///   </li>
/// </ul>
+ (void)setUserAttributeWithIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Sets a user attribute with an array of string values for the given key.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     value: An array of string values to set for the attribute.
///   </li>
///   <li>
///     key: The key associated with the user attribute. This key will be used to identify and retrieve the attribute.
///   </li>
/// </ul>
+ (void)setUserAttributeWithStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Sets a user attribute with an array of double values for the given key.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     value: An array of double values to set for the attribute.
///   </li>
///   <li>
///     key: The key associated with the user attribute. This key will be used to identify and retrieve the attribute.
///   </li>
/// </ul>
+ (void)setUserAttributeWithDoubleArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Increments a numerical user attribute by a specified value. If the attribute does not exist, it will be created with the initial increment value.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     key: The key of the numerical user attribute to increment.
///   </li>
///   <li>
///     value: The value to increment the attribute by. Defaults to 1.
///   </li>
/// </ul>
+ (void)incrementUserAttributeWithKey:(NSString * _Nonnull)key value:(NSInteger)value;
/// Decrements a numerical user attribute by a specified value. If the attribute does not exist, it will be created with the initial negative decrement value.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     key: The key of the numerical user attribute to decrement.
///   </li>
///   <li>
///     value: The value to decrement the attribute by. Defaults to 1.
///   </li>
/// </ul>
+ (void)decrementUserAttributeWithKey:(NSString * _Nonnull)key value:(NSInteger)value;
/// Sets multiple user attributes at once using a dictionary.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     attributes: A dictionary where the keys are the attribute names (String) and the values are the corresponding attribute values (Any). Supported value types are Bool, Int, Double, String, and arrays of these types.
///   </li>
/// </ul>
+ (void)setUserAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
/// Clears all user-defined attributes. This will remove all custom attributes that have been set.
+ (void)clearUserAttributes;
/// Clears a specific user attribute based on its key.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     key: The key of the user attribute to remove.
///   </li>
/// </ul>
+ (void)clearUserAttributeForKey:(NSString * _Nonnull)key;
/// Clears all built-in attributes managed by the SDK.
+ (void)clearBuiltInAttributes;
/// Adds a dynamic offering that will override the default ones displayed in the paywall.
/// Use this when you want to force a specific plan (and optionally offer) to be shown in a specific context.
/// \param reference A unique key to identify this dynamic offering (e.g., screen identifier).
///
/// \param planVendorId The plan to display in the offering.
///
/// \param offerVendorId (Optional) The specific offer to highlight. If nil, default logic applies.
///
/// \param completion Called with <code>true</code> if the dynamic offering was successfully added.
///
+ (void)setDynamicOfferingWithReference:(NSString * _Nonnull)reference planVendorId:(NSString * _Nonnull)planVendorId offerVendorId:(NSString * _Nullable)offerVendorId completion:(void (^ _Nonnull)(BOOL))completion;
/// Retrieves the list of currently active dynamic offerings (synchronous version).
/// Use this to inspect what dynamic offerings are currently registered in memory.
+ (NSArray<PLYOffering *> * _Nonnull)getDynamicOfferings SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the list of currently active dynamic offerings asynchronously.
/// Useful when needing to load the offerings from disk or async sources.
/// \param completion Closure called with the current dynamic offerings.
///
+ (void)getDynamicOfferingsWithCompletion:(void (^ _Nonnull)(NSArray<PLYOffering *> * _Nonnull))completion;
/// Removes a specific dynamic offering by its reference key.
/// Use this to stop overriding the default offering for a specific context.
/// \param reference The unique reference used when the offering was added.
///
+ (void)removeDynamicOfferingWithReference:(NSString * _Nonnull)reference;
/// Removes all dynamic offerings from memory and storage.
/// Call this to reset the offering logic and go back to the default configuration.
+ (void)clearDynamicOfferings;
+ (void)setAttribute:(enum PLYAttribute)attribute value:(NSString * _Nonnull)value;
/// Sets the theme mode for the SDK’s UI elements. This setting will influence the visual appearance of any SDK-provided UI.
/// \param mode The desired theme mode to apply.
///
+ (void)setThemeMode:(enum PLYThemeMode)mode;
/// This method is used to trigger an event telling Purchasely that a content has been consumed through a subscription.
+ (void)userDidConsumeSubscriptionContent;
@end

/// WARNING: Add new attribute to the end and always check the list is in the same order than Android
/// It is very important to have the same order for bridges SDK (RN, Flutter, Cordova, Unity) to work properly
/// *
typedef SWIFT_ENUM(NSInteger, PLYAttribute, open) {
  PLYAttributeFirebaseAppInstanceId = 0,
  PLYAttributeAirshipChannelId = 1,
  PLYAttributeAirshipUserId = 2,
  PLYAttributeBatchInstallationId = 3,
  PLYAttributeAdjustId = 4,
  PLYAttributeAppsflyerId = 5,
  PLYAttributeOneSignalPlayerId = 6,
  PLYAttributeMixpanelDistinctId = 7,
  PLYAttributeClevertapId = 8,
  PLYAttributeSendinblueUserEmail = 9,
  PLYAttributeIterableUserEmail = 10,
  PLYAttributeIterableUserId = 11,
  PLYAttributeAtInternetIdClient = 12,
  PLYAttributeMParticleUserId = 13,
  PLYAttributeCustomerioUserId = 14,
  PLYAttributeCustomerioUserEmail = 15,
  PLYAttributeBranchUserDeveloperIdentity = 16,
  PLYAttributeAmplitudeUserId = 17,
  PLYAttributeAmplitudeDeviceId = 18,
  PLYAttributeMoengageUniqueId = 19,
  PLYAttributeOneSignalExternalId = 20,
  PLYAttributeBatchCustomUserId = 21,
  PLYAttributeOneSignalUserId = 22,
};

/// Represents the available theme modes for the SDK’s UI elements.
/// <ul>
///   <li>
///     light: Use a light color scheme.
///   </li>
///   <li>
///     dark: Use a dark color scheme.
///   </li>
///   <li>
///     system: Follow the system’s current appearance setting (light or dark mode).
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PLYThemeMode, open) {
  PLYThemeModeLight = 0,
  PLYThemeModeDark = 1,
  PLYThemeModeSystem = 2,
};










SWIFT_CLASS("_TtC10Purchasely16StorekitSettings")
@interface StorekitSettings : NSObject
- (nonnull instancetype)initWithShouldUseStorekit2IfAvailable:(BOOL)shouldUseStorekit2IfAvailable simulateAskToBuy:(BOOL)simulateAskToBuy OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) StorekitSettings * _Nonnull storeKit1;)
+ (StorekitSettings * _Nonnull)storeKit1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) StorekitSettings * _Nonnull storeKit2;)
+ (StorekitSettings * _Nonnull)storeKit2 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






















#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef PURCHASELY_SWIFT_H
#define PURCHASELY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Purchasely",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)



enum PLYEvent : NSInteger;

@interface NSString (SWIFT_EXTENSION(Purchasely))
+ (NSString * _Nonnull)fromPLYEvent:(enum PLYEvent)event SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PLYAlertMessage, open) {
  PLYAlertMessageCommonError = 0,
  PLYAlertMessageInAppSuccess = 1,
  PLYAlertMessageInAppDeferred = 2,
  PLYAlertMessageInAppSuccessUnauthentified = 3,
  PLYAlertMessageInAppRestorationSuccess = 4,
  PLYAlertMessageInAppRestorationError = 5,
  PLYAlertMessageInAppError = 6,
  PLYAlertMessageUnsubscribeGoogle = 7,
  PLYAlertMessageUnsubscribeiOS = 8,
  PLYAlertMessageUnsubscribeAmazon = 9,
};

typedef SWIFT_ENUM(NSInteger, PLYAppTechnology, open) {
  PLYAppTechnologyCordova = 0,
  PLYAppTechnologyFlutter = 1,
  PLYAppTechnologyNative = 2,
  PLYAppTechnologyMacCatalyst = 3,
  PLYAppTechnologyReactNative = 4,
  PLYAppTechnologyUnity = 5,
};


SWIFT_CLASS("_TtC10Purchasely11PLYCampaign")
@interface PLYCampaign : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC10Purchasely18PLYCampaignTrigger")
@interface PLYCampaignTrigger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, PLYCancellationReason, open) {
  PLYCancellationReasonPrice = 1,
  PLYCancellationReasonBetterApp = 2,
  PLYCancellationReasonNoLongerUseful = 3,
  PLYCancellationReasonNoUse = 4,
  PLYCancellationReasonTechnicalIssues = 5,
  PLYCancellationReasonOther = 6,
  PLYCancellationReasonUnknown = 7,
};

typedef SWIFT_ENUM(NSInteger, PLYCustomPropertyDataType, open) {
  PLYCustomPropertyDataTypeInt = 0,
  PLYCustomPropertyDataTypeFloat = 1,
  PLYCustomPropertyDataTypeString = 2,
  PLYCustomPropertyDataTypeDate = 3,
  PLYCustomPropertyDataTypeBool = 4,
};

typedef SWIFT_ENUM(NSInteger, PLYEnvironment, open) {
  PLYEnvironmentProd = 0,
  PLYEnvironmentStaging = 1,
};

typedef SWIFT_ENUM(NSInteger, PLYEvent, open) {
  PLYEventAppConfigured = 0,
  PLYEventAppInstalled = 1,
  PLYEventAppStarted = 2,
  PLYEventAppUpdated = 3,
  PLYEventCancellationReasonPublished = 4,
  PLYEventCarouselSlideSwiped = 5,
  PLYEventDeeplinkOpened = 6,
  PLYEventInAppDeferred = 7,
  PLYEventInAppPurchaseFailed = 8,
  PLYEventInAppPurchased = 9,
  PLYEventInAppPurchasing = 10,
  PLYEventInAppRenewed = 11,
  PLYEventInAppRestored = 12,
  PLYEventLinkOpened = 13,
  PLYEventLoginTapped = 14,
  PLYEventPlanSelected = 15,
  PLYEventPresentationOpened = 16,
  PLYEventPresentationSelected = 17,
  PLYEventPresentationViewed = 18,
  PLYEventPresentationLoaded = 19,
  PLYEventPromoCodeTapped = 20,
  PLYEventPurchaseCancelled = 21,
  PLYEventPurchaseCancelledByApp = 22,
  PLYEventPurchaseFromStoreTapped = 23,
  PLYEventPurchaseTapped = 24,
  PLYEventReceiptCreated = 25,
  PLYEventReceiptFailed = 26,
  PLYEventReceiptValidated = 27,
  PLYEventRestoreFailed = 28,
  PLYEventRestoreStarted = 29,
  PLYEventRestoreSucceeded = 30,
  PLYEventRestoreTapped = 31,
  PLYEventProductFetchError = 32,
  PLYEventSubscriptionCancelTapped = 33,
  PLYEventSubscriptionDetailsViewed = 34,
  PLYEventSubscriptionPlanTapped = 35,
  PLYEventSubscriptionsListViewed = 36,
  PLYEventSubscriptionsTransferred = 37,
  PLYEventUserLoggedIn = 38,
  PLYEventUserLoggedOut = 39,
  PLYEventPresentationClosed = 40,
  PLYEventSubscriptionContentUsed = 41,
  PLYEventOptionsSelected = 42,
  PLYEventOptionsValidated = 43,
};


SWIFT_PROTOCOL("_TtP10Purchasely16PLYEventDelegate_")
@protocol PLYEventDelegate
- (void)eventTriggered:(enum PLYEvent)event properties:(NSDictionary<NSString *, id> * _Nullable)properties;
@end

typedef SWIFT_ENUM(NSInteger, PLYEventProperty, open) {
  PLYEventPropertyTemplate = 0,
  PLYEventPropertySdkVersion = 1,
  PLYEventPropertyEventName = 2,
  PLYEventPropertyEventCreatedAtMs = 3,
  PLYEventPropertyEventCreated = 4,
  PLYEventPropertyEventCreatedAtMsOriginal = 5,
  PLYEventPropertyEventCreatedOriginal = 6,
  PLYEventPropertyDisplayedPresentation = 7,
  PLYEventPropertyIsFallbackPresentation = 8,
  PLYEventPropertyUserId = 9,
  PLYEventPropertyAnonymousUserId = 10,
  PLYEventPropertyPurchasablePlans = 11,
  PLYEventPropertyDeeplinkIdentifier = 12,
  PLYEventPropertySourceIdentifier = 13,
  PLYEventPropertySelectedPlan = 14,
  PLYEventPropertyPlan = 15,
  PLYEventPropertyPreviousSelectedPlan = 16,
  PLYEventPropertyLinkIdentifier = 17,
  PLYEventPropertyCarousels = 18,
  PLYEventPropertyDevice = 19,
  PLYEventPropertyOsVersion = 20,
  PLYEventPropertyType = 21,
  PLYEventPropertyErrorMessage = 22,
  PLYEventPropertyLanguage = 23,
  PLYEventPropertyPlanType = 24,
  PLYEventPropertyPurchaselyPlanId = 25,
  PLYEventPropertyStore = 26,
  PLYEventPropertyStoreCountry = 27,
  PLYEventPropertyStoreProductId = 28,
  PLYEventPropertyPriceInCustomerCurrency = 29,
  PLYEventPropertyCustomerCurrency = 30,
  PLYEventPropertyPeriod = 31,
  PLYEventPropertyDuration = 32,
  PLYEventPropertyIntroPriceInCustomerCurrency = 33,
  PLYEventPropertyIntroPeriod = 34,
  PLYEventPropertyIntroDuration = 35,
  PLYEventPropertyFreePeriod = 36,
  PLYEventPropertyFreeDuration = 37,
  PLYEventPropertyHasFreeTrial = 38,
  PLYEventPropertyPromotionalOfferPriceInCustomerCurrency = 39,
  PLYEventPropertyPromotionalOfferPeriod = 40,
  PLYEventPropertyPromotionalOfferDuration = 41,
  PLYEventPropertyDiscountReferent = 42,
  PLYEventPropertyDiscountPercentageComparisonToReferent = 43,
  PLYEventPropertyDiscountPriceComparisonToReferent = 44,
  PLYEventPropertyIsDefault = 45,
  PLYEventPropertySelectedSlide = 46,
  PLYEventPropertyNumberOfSlides = 47,
  PLYEventPropertyIsCarouselAutoPlaying = 48,
  PLYEventPropertyDefaultSlide = 49,
  PLYEventPropertyPreviousSlide = 50,
  PLYEventPropertySelectedProduct = 51,
  PLYEventPropertyPlanChangeType = 52,
  PLYEventPropertyCancellationReasonId = 53,
  PLYEventPropertyCancellationReason = 54,
  PLYEventPropertyRunningSubscriptions = 55,
  PLYEventPropertyProduct = 56,
  PLYEventPropertySelectedPresentation = 57,
  PLYEventPropertyPreviousSelectedPresentation = 58,
  PLYEventPropertyPlacementId = 59,
  PLYEventPropertyAudienceId = 60,
  PLYEventPropertyAbTestId = 61,
  PLYEventPropertyAbTestVariantId = 62,
  PLYEventPropertyContentId = 63,
  PLYEventPropertySessionDuration = 64,
  PLYEventPropertySessionCount = 65,
  PLYEventPropertyScreenDuration = 66,
  PLYEventPropertyScreenDisplayedAt = 67,
  PLYEventPropertyScreenDisplayedAtMs = 68,
  PLYEventPropertyAppInstalledAt = 69,
  PLYEventPropertyAppInstalledAtMs = 70,
  PLYEventPropertyPaywallrequestDurationInMs = 71,
  PLYEventPropertyStoreKitVersion = 72,
  PLYEventPropertyPresentationType = 73,
  PLYEventPropertyPromoOffer = 74,
  PLYEventPropertyOrientation = 75,
  PLYEventPropertySessionId = 76,
  PLYEventPropertySelectedOptionId = 77,
  PLYEventPropertySelectedOptions = 78,
  PLYEventPropertyDisplayedOptions = 79,
  PLYEventPropertyCampaignId = 80,
};

typedef SWIFT_ENUM(NSInteger, PLYEventType, open) {
  PLYEventTypePromotedIAP = 0,
  PLYEventTypePaywallUserBehavior = 1,
  PLYEventTypePayment = 2,
  PLYEventTypeSDKEvents = 3,
  PLYEventTypeReceipts = 4,
  PLYEventTypeCancellation = 5,
  PLYEventTypeRestorePurchase = 6,
  PLYEventTypeSubscriptionTransfer = 7,
  PLYEventTypeLogin = 8,
  PLYEventTypePhoneSettings = 9,
};

enum PLYLogLevel : NSInteger;

SWIFT_CLASS("_TtC10Purchasely9PLYLogger")
@interface PLYLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)logWithMessage:(NSString * _Nonnull)message level:(enum PLYLogLevel)level;
@end

typedef SWIFT_ENUM(NSInteger, PLYLogLevel, open) {
  PLYLogLevelDebug = 0,
  PLYLogLevelInfo = 1,
  PLYLogLevelWarn = 2,
  PLYLogLevelError = 3,
};


@class PLYMessage;

/// Protocol used to forward logged messages to any object.
SWIFT_PROTOCOL("_TtP10Purchasely10PLYLogging_")
@protocol PLYLogging
- (void)messageLoggedWithMessage:(PLYMessage * _Nonnull)message;
@end


SWIFT_CLASS("_TtC10Purchasely10PLYMessage")
@interface PLYMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;

SWIFT_CLASS("_TtC10Purchasely17PLYOfferSignature")
@interface PLYOfferSignature : NSObject
@property (nonatomic, copy) NSString * _Nonnull planVendorId;
@property (nonatomic, copy) NSString * _Nonnull identifier;
@property (nonatomic, copy) NSString * _Nonnull signature;
@property (nonatomic, copy) NSUUID * _Nonnull nonce;
@property (nonatomic, copy) NSString * _Nonnull keyIdentifier;
@property (nonatomic) double timestamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSArray;

SWIFT_CLASS("_TtC10Purchasely11PLYOffering")
@interface PLYOffering : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull reference;
@property (nonatomic, readonly, copy) NSString * _Nonnull planId;
@property (nonatomic, readonly, copy) NSString * _Nullable offerId;
- (nonnull instancetype)initWithReference:(NSString * _Nonnull)reference planId:(NSString * _Nonnull)planId offerId:(NSString * _Nullable)offerId OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (NSString * _Nullable)toJsonStringFromArray:(NSArray * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PLYPlanType : NSInteger;
@class PLYPromoOffer;

SWIFT_CLASS("_TtC10Purchasely7PLYPlan")
@interface PLYPlan : NSObject
@property (nonatomic, copy) NSString * _Nonnull vendorId;
@property (nonatomic, copy) NSString * _Nullable appleProductId;
@property (nonatomic) enum PLYPlanType type;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSArray<PLYPromoOffer *> * _Nonnull promoOffers;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@interface PLYPlan (SWIFT_EXTENSION(Purchasely))
- (NSString * _Nullable)priceDifferenceWithComparedTo:(PLYPlan * _Nonnull)plan SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)priceDifferenceInPercentageTo:(PLYPlan * _Nonnull)plan SWIFT_WARN_UNUSED_RESULT;
@end


@interface PLYPlan (SWIFT_EXTENSION(Purchasely))
/// This attribute is used to check if current user is eligible for introductory offer for current plan
/// <ul>
///   <li>
///     Completion:
///   </li>
///   <li>
///     Bool: true if user is eligible. False if not, or if receipt cannot be decoded.
///   </li>
/// </ul>
- (void)isUserEligibleForIntroductoryOfferWithCompletion:(void (^ _Nonnull)(BOOL))completion;
@end

@class NSDecimalNumber;

@interface PLYPlan (SWIFT_EXTENSION(Purchasely))
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable amount;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable introAmount;
@property (nonatomic, readonly, copy) NSString * _Nullable period;
@property (nonatomic, readonly, copy) NSString * _Nullable apiPeriod;
@property (nonatomic, readonly) NSInteger duration;
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
@property (nonatomic, readonly, copy) NSString * _Nullable currencySymbol;
- (NSString * _Nullable)localizedFullPriceWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedPriceWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedPeriodWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL hasIntroductoryPrice;
@property (nonatomic, readonly) BOOL hasPromoOffers;
@property (nonatomic, readonly) BOOL hasFreeTrial;
- (NSString * _Nullable)localizedFullIntroductoryPriceWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedIntroductoryPriceWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedIntroductoryPeriodWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)introductoryPeriodWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedIntroductoryDurationWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)introductoryDurationWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PLYPlanType, open) {
  PLYPlanTypeConsumable = 0,
  PLYPlanTypeNonConsumable = 1,
  PLYPlanTypeAutoRenewingSubscription = 2,
  PLYPlanTypeNonRenewingSubscription = 3,
  PLYPlanTypeUnknown = 4,
};

enum PLYPresentationType : NSInteger;
@class PLYPresentationViewController;
@class PLYPresentationPlan;
@class PLYPresentationMetadata;
@class UIColor;

SWIFT_CLASS("_TtC10Purchasely15PLYPresentation")
@interface PLYPresentation : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
@property (nonatomic, readonly, copy) NSString * _Nullable placementId;
@property (nonatomic, readonly, copy) NSString * _Nullable audienceId;
@property (nonatomic, readonly, copy) NSString * _Nullable abTestId;
@property (nonatomic, readonly, copy) NSString * _Nullable abTestVariantId;
@property (nonatomic, readonly, copy) NSString * _Nullable campaignId;
@property (nonatomic, readonly) enum PLYPresentationType type;
@property (nonatomic, readonly, strong) PLYPresentationViewController * _Nullable controller;
@property (nonatomic, readonly, copy) NSArray<PLYPresentationPlan *> * _Nonnull plans;
@property (nonatomic, readonly, strong) PLYPresentationMetadata * _Nullable metadata;
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, readonly) NSInteger height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PLYPresentationAction, open) {
  PLYPresentationActionClose = 0,
  PLYPresentationActionLogin = 1,
  PLYPresentationActionNavigate = 2,
  PLYPresentationActionPurchase = 3,
  PLYPresentationActionRestore = 4,
  PLYPresentationActionOpenPresentation = 5,
  PLYPresentationActionOpenPlacement = 6,
  PLYPresentationActionPromoCode = 7,
};

@class NSURL;

SWIFT_CLASS("_TtC10Purchasely31PLYPresentationActionParameters")
@interface PLYPresentationActionParameters : NSObject
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) PLYPlan * _Nullable plan;
@property (nonatomic, strong) PLYPromoOffer * _Nullable promoOffer;
@property (nonatomic, copy) NSString * _Nullable presentation;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

SWIFT_CLASS("_TtC10Purchasely19PLYPresentationInfo")
@interface PLYPresentationInfo : NSObject
/// <code>controller</code> parameter represents current paywall controller displayed, <code>nil</code> if purchase was made manually.
@property (nonatomic, strong) UIViewController * _Nullable controller;
/// <code>contentId</code> parameter represents contentId associated with current paywall controller
@property (nonatomic, copy) NSString * _Nullable contentId;
/// <code>presentationId</code> parameter represents current paywall presentation id
@property (nonatomic, copy) NSString * _Nullable presentationId;
/// <code>placementId</code> parameter represents current placement id
@property (nonatomic, copy) NSString * _Nullable placementId;
/// <code>audienceId</code> parameter represents current audience id
@property (nonatomic, copy) NSString * _Nullable audienceId;
/// <code>abTestVariantId</code> parameter represents current variant id when A/B testing
@property (nonatomic, copy) NSString * _Nullable abTestVariantId;
/// <code>abTestId</code> parameter represents current A/B test Id
@property (nonatomic, copy) NSString * _Nullable abTestId;
/// <code>campaignId</code> parameter represents campaign Id
@property (nonatomic, copy) NSString * _Nullable campaignId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10Purchasely23PLYPresentationMetadata")
@interface PLYPresentationMetadata : NSObject
- (void)getStringWith:(NSString * _Nonnull)key completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (NSArray<NSString *> * _Nonnull)getKeys SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)getRawMetadata SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10Purchasely19PLYPresentationPlan")
@interface PLYPresentationPlan : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable planVendorId;
@property (nonatomic, readonly, copy) NSString * _Nullable storeProductId;
@property (nonatomic, readonly, copy) NSString * _Nullable offerId;
@property (nonatomic, readonly, copy) NSString * _Nullable offerVendorId;
@property (nonatomic, readonly, getter=default) BOOL default_;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, PLYPresentationType, open) {
  PLYPresentationTypeNormal = 0,
  PLYPresentationTypeFallback = 1,
  PLYPresentationTypeDeactivated = 2,
  PLYPresentationTypeClient = 3,
};

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC10Purchasely29PLYPresentationViewController")
@interface PLYPresentationViewController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface PLYPresentationViewController (SWIFT_EXTENSION(Purchasely))
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@end


SWIFT_CLASS("_TtC10Purchasely10PLYProduct")
@interface PLYProduct : NSObject
@property (nonatomic, copy) NSString * _Nonnull vendorId;
@property (nonatomic, copy) NSArray<PLYPlan *> * _Nonnull plans;
@property (nonatomic, copy) NSString * _Nullable name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, PLYProductViewControllerResult, open) {
  PLYProductViewControllerResultPurchased = 0,
  PLYProductViewControllerResultCancelled = 1,
  PLYProductViewControllerResultRestored = 2,
};


SWIFT_CLASS("_TtC10Purchasely13PLYPromoOffer")
@interface PLYPromoOffer : NSObject
@property (nonatomic, copy) NSString * _Nonnull vendorId;
@property (nonatomic, copy) NSString * _Nonnull storeOfferId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, PLYRunningMode, open) {
  PLYRunningModeTransactionOnly = 0,
  PLYRunningModeObserver = 1,
  PLYRunningModePaywallObserver = 2,
  PLYRunningModeFull = 3,
};

enum PLYSubscriptionSource : NSInteger;
@class NSDate;
enum PLYSubscriptionOfferType : NSInteger;
enum PLYSubscriptionStatus : NSInteger;
enum PLYSubscriptionEnvironment : NSInteger;

SWIFT_CLASS("_TtC10Purchasely15PLYSubscription")
@interface PLYSubscription : NSObject
@property (nonatomic, strong) PLYProduct * _Nonnull product;
@property (nonatomic, strong) PLYPlan * _Nonnull plan;
@property (nonatomic) enum PLYSubscriptionSource subscriptionSource;
@property (nonatomic, copy) NSDate * _Nullable nextRenewalDate;
@property (nonatomic, copy) NSDate * _Nullable cancelledDate;
@property (nonatomic, copy) NSDate * _Nullable originalPurchasedDate;
@property (nonatomic, copy) NSDate * _Nullable purchasedDate;
@property (nonatomic) enum PLYSubscriptionOfferType offerType;
@property (nonatomic) enum PLYSubscriptionStatus status;
@property (nonatomic) enum PLYSubscriptionEnvironment environment;
@property (nonatomic, copy) NSString * _Nullable storeCountry;
@property (nonatomic) BOOL isFamilyShared;
@property (nonatomic, copy) NSString * _Nullable contentId;
@property (nonatomic, copy) NSString * _Nullable offerIdentifier;
@property (nonatomic) float cumulatedRevenuesInUsd;
@property (nonatomic) NSInteger subscriptionDurationInDays;
@property (nonatomic) NSInteger subscriptionDurationInWeeks;
@property (nonatomic) NSInteger subscriptionDurationInMonths;
- (void)unsubscribe;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, PLYSubscriptionEnvironment, open) {
  PLYSubscriptionEnvironmentSandbox = 0,
  PLYSubscriptionEnvironmentProduction = 1,
  PLYSubscriptionEnvironmentUnknown = 2,
};

typedef SWIFT_ENUM(NSInteger, PLYSubscriptionOfferType, open) {
  PLYSubscriptionOfferTypeNone = 0,
  PLYSubscriptionOfferTypeFreeTrial = 1,
  PLYSubscriptionOfferTypeIntroOffer = 2,
  PLYSubscriptionOfferTypePromoCode = 3,
  PLYSubscriptionOfferTypePromotionalOffer = 4,
};

typedef SWIFT_ENUM(NSInteger, PLYSubscriptionSource, open) {
  PLYSubscriptionSourceAppleAppStore = 0,
  PLYSubscriptionSourceGooglePlayStore = 1,
  PLYSubscriptionSourceAmazonAppstore = 2,
  PLYSubscriptionSourceHuaweiAppGallery = 3,
  PLYSubscriptionSourceNone = 4,
};

typedef SWIFT_ENUM(NSInteger, PLYSubscriptionStatus, open) {
  PLYSubscriptionStatusAutoRenewing = 0,
  PLYSubscriptionStatusOnHold = 1,
  PLYSubscriptionStatusInGracePeriod = 2,
  PLYSubscriptionStatusAutoRenewingCanceled = 3,
  PLYSubscriptionStatusDeactivated = 4,
  PLYSubscriptionStatusRevoked = 5,
  PLYSubscriptionStatusPaused = 6,
  PLYSubscriptionStatusUnpaid = 7,
  PLYSubscriptionStatusUnknown = 8,
};

typedef SWIFT_ENUM(NSInteger, PLYUIControllerType, open) {
  PLYUIControllerTypeSubscriptionList = 0,
  PLYUIControllerTypeProductPage = 1,
  PLYUIControllerTypeWebPage = 2,
  PLYUIControllerTypeCancellationSurvey = 3,
};


SWIFT_PROTOCOL("_TtP10Purchasely12PLYUIHandler_")
@protocol PLYUIHandler
@optional
- (void)displayWithPresentation:(PLYPresentation * _Nonnull)presentation from:(UIViewController * _Nullable)sourceController proceed:(void (^ _Nonnull)(void))proceed;
- (void)displayWithAlert:(enum PLYAlertMessage)alert with:(NSError * _Nullable)error proceed:(void (^ _Nonnull)(void))proceed;
@end

enum PLYUserAttributeType : NSInteger;
enum PLYUserAttributeSource : NSInteger;

SWIFT_PROTOCOL("_TtP10Purchasely24PLYUserAttributeDelegate_")
@protocol PLYUserAttributeDelegate
@optional
- (void)onUserAttributeSetWithKey:(NSString * _Nonnull)key type:(enum PLYUserAttributeType)type value:(id _Nullable)value source:(enum PLYUserAttributeSource)source;
- (void)onUserAttributeRemovedWithKey:(NSString * _Nonnull)key source:(enum PLYUserAttributeSource)source;
@end

typedef SWIFT_ENUM(NSInteger, PLYUserAttributeSource, open) {
  PLYUserAttributeSourcePurchasely = 0,
  PLYUserAttributeSourceClient = 1,
};

typedef SWIFT_ENUM(NSInteger, PLYUserAttributeType, open) {
  PLYUserAttributeTypeString = 0,
  PLYUserAttributeTypeBool = 1,
  PLYUserAttributeTypeInt = 2,
  PLYUserAttributeTypeDouble = 3,
  PLYUserAttributeTypeDate = 4,
  PLYUserAttributeTypeStringArray = 5,
  PLYUserAttributeTypeIntArray = 6,
  PLYUserAttributeTypeDoubleArray = 7,
  PLYUserAttributeTypeBoolArray = 8,
  PLYUserAttributeTypeDictionary = 9,
  PLYUserAttributeTypeUnknown = 10,
};


/// This class manages the In App purchase process from grabbing the product details to performing
/// the purchase and sending the receipts to the server.
/// This manager is also meant to be used for restoration
SWIFT_CLASS("_TtC10Purchasely10Purchasely")
@interface Purchasely : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Purchasely (SWIFT_EXTENSION(Purchasely)) <UNUserNotificationCenterDelegate>
@end

















@interface Purchasely (SWIFT_EXTENSION(Purchasely))
+ (void)showController:(UIViewController * _Nonnull)controller type:(enum PLYUIControllerType)type from:(UIViewController * _Nullable)sourceViewController;
@end




@class StorekitSettings;
@class NSLocale;
enum PLYAttribute : NSInteger;
enum PLYThemeMode : NSInteger;

@interface Purchasely (SWIFT_EXTENSION(Purchasely))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull anonymousUserId;)
+ (NSString * _Nonnull)anonymousUserId SWIFT_WARN_UNUSED_RESULT;
/// Sets the SDK to point to a client
/// This must be called in <code>didFinishLaunchingWithOptions</code> to handle the receipts sent on startup
+ (void)startWithAPIKey:(NSString * _Nonnull)apiKey appUserId:(NSString * _Nullable)appUserId runningMode:(enum PLYRunningMode)runningMode paywallActionsInterceptor:(void (^ _Nullable)(enum PLYPresentationAction, PLYPresentationActionParameters * _Nullable, PLYPresentationInfo * _Nullable, void (^ _Nonnull)(BOOL)))paywallActionsInterceptor storekitSettings:(StorekitSettings * _Nonnull)storekitSettings logLevel:(enum PLYLogLevel)logLevel initialized:(void (^ _Nullable)(BOOL, NSError * _Nullable))initialized;
+ (NSString * _Nullable)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setUIHandler:(id <PLYUIHandler> _Nullable)uiHandler;
+ (void)setUserAttributeDelegate:(id <PLYUserAttributeDelegate> _Nonnull)userAttributeDelegate;
/// This function is used to set a handler that is called when a user
/// makes an action in a paywall to give a chance to the app to intercept it
/// and act or let Purchasely deal with it (or both).
/// This can be done to
/// <ul>
///   <li>
///     Display terms and conditions that must be read and accepted before purchasing
///   </li>
///   <li>
///     Overrule the tap on a purchase button to use your own purchase system
///   </li>
///   <li>
///     (on kids app) make sure a parent is using the phone before opening Safari or showing Promo code sheet which is required by the App Store guidelines
///   </li>
/// </ul>
/// The handler gives you:
/// <ul>
///   <li>
///     <code>action</code>, a <code>PLYPresentationAction</code> enum describing the type
///   </li>
///   <li>
///     <code>parameters</code>, a dictionary with the parameters of the action (for Objective-C compliance it is not in the enum)
///   </li>
///   <li>
///     <code>controller</code>, the <code>UIViewController</code> used to display something above (like an error message) or dismiss it
///   </li>
///   <li>
///     <code>processAction</code> a completion handler parametered with a BOOL telling if Purchasely should process the action itself or ignore it.
///   </li>
/// </ul>
+ (void)setPaywallActionsInterceptor:(void (^ _Nullable)(enum PLYPresentationAction, PLYPresentationActionParameters * _Nullable, PLYPresentationInfo * _Nullable, void (^ _Nonnull)(BOOL)))paywallActionsInterceptor;
+ (void)userLoginWith:(NSString * _Nonnull)appUserId;
+ (void)userLoginWith:(NSString * _Nonnull)appUserId shouldRefresh:(void (^ _Nullable)(BOOL))shouldRefresh;
+ (void)userLogout:(BOOL)clearUserAttributes;
+ (BOOL)isAnonymous SWIFT_WARN_UNUSED_RESULT;
/// This function sets a handler that is triggered once the purchase controller is dismissed.
/// It provides the output of the action (cancel, purchase, restore).
/// You can use it for your tracking or to decide if you want to display something post purchase.
/// You can override this handler by providing a different completion handler
/// in the <code>productController(for:with:completion:)</code> method.
/// This method is particularly helpful to get the result from controllers you didn’t indtanciate yourself
/// like Promoted In-App Purchases or product controllers displayed by deeplinks.
/// \param defaultPresentationResultHandler the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///
+ (void)setDefaultPresentationResultHandler:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))defaultPresentationResultHandler;
/// You can force a language for the SDK including error messages and paywall.
/// The language passed must be ISO 639-1 or ISO 639-2
+ (void)setLanguageFrom:(NSLocale * _Nullable)locale;
+ (void)readyToOpenDeeplink:(BOOL)ready;
+ (void)setEnvironment:(enum PLYEnvironment)environment;
+ (void)setLogLevel:(enum PLYLogLevel)logLevel;
+ (void)setAppTechnology:(enum PLYAppTechnology)technology;
+ (void)setSdkBridgeVersion:(NSString * _Nullable)sdkBridgeVersion;
+ (void)addLogger:(id <PLYLogging> _Nonnull)logger;
+ (void)allProductsWithSuccess:(void (^ _Nonnull)(NSArray<PLYProduct *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
+ (void)productWith:(NSString * _Nonnull)vendorId success:(void (^ _Nonnull)(PLYProduct * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// Fetches plan details asynchronously using your custom vendor identifier.
/// This method retrieves the specific <code>PLYPlan</code> object associated with the unique vendor ID you provide.
/// The result is delivered via the corresponding success or failure callback.
/// \param vendorId Your custom identifier for the desired plan (defined in your backend or configuration).
///
/// \param success The closure invoked upon successful retrieval of the plan. It receives the <code>PLYPlan</code> object.
///
/// \param failure The closure invoked if an error occurs during retrieval (e.g., plan not found for the given vendorId, network error). It receives an optional <code>Error</code> object describing the issue.
///
+ (void)planWith:(NSString * _Nonnull)vendorId success:(void (^ _Nonnull)(PLYPlan * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// Fetches plan details asynchronously using the App Store Product ID (SKU).
/// This method retrieves the specific <code>PLYPlan</code> object associated with the provided App Store Product ID (often referred to as SKU).
/// The result is delivered via the corresponding success or failure callback.
/// \param sku The App Store Product ID (SKU) for the desired plan.
///
/// \param success The closure invoked upon successful retrieval of the plan. It receives the <code>PLYPlan</code> object.
///
/// \param failure The closure invoked if an error occurs during retrieval (e.g., plan not found for the given SKU, network error). It receives an optional <code>Error</code> object describing the issue.
///
+ (void)planFor:(NSString * _Nonnull)sku success:(void (^ _Nonnull)(PLYPlan * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
+ (void)userSubscriptionsHistory:(BOOL)invalidateCache success:(void (^ _Nonnull)(NSArray<PLYSubscription *> * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
+ (void)userSubscriptions:(BOOL)invalidateCache success:(void (^ _Nonnull)(NSArray<PLYSubscription *> * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method returns a presentation for a specific product. If no presentationVendorId is set (or an invalid one)
/// the product default presentation will be displayed. If none has been set it will fallback to the app default presentation.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     productVendorId: the vendorId of the product to show
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     contentId: (optional) an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)productControllerFor:(NSString * _Nonnull)productVendorId with:(NSString * _Nullable)presentationVendorId contentId:(NSString * _Nullable)contentId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific product. If no presentationVendorId is set (or an invalid one)
/// the product default presentation will be displayed. If none has been set it will fallback to the app default presentation.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     productVendorId: the vendorId of the product to show
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)productControllerFor:(NSString * _Nonnull)productVendorId with:(NSString * _Nullable)presentationVendorId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific plan. If no presentationVendorId is set (or an invalid one)
/// the plan default presentation will be displayed. If none has been set it will fallback to the app default presentation.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     planVendorId: the vendorId of the product to show
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     contentId: (optional) an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)planControllerFor:(NSString * _Nonnull)planVendorId with:(NSString * _Nullable)presentationVendorId contentId:(NSString * _Nullable)contentId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific plan. If no presentationVendorId is set (or an invalid one)
/// the plan default presentation will be displayed. If none has been set it will fallback to the app default presentation.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     planVendorId: the vendorId of the product to show
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)planControllerFor:(NSString * _Nonnull)planVendorId with:(NSString * _Nullable)presentationVendorId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation with a specific vendorId. If no presentationVendorId is set (or an invalid one)
/// the app default presentation will be displayed.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     contentId: an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)presentationControllerWith:(NSString * _Nullable)presentationVendorId contentId:(NSString * _Nullable)contentId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation with a specific vendorId. If no presentationVendorId is set (or an invalid one)
/// the app default presentation will be displayed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)presentationControllerWith:(NSString * _Nullable)presentationVendorId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific placement Id.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     placementId: the placementId identifying where the user was in your app
///   </li>
///   <li>
///     contentId: an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (PLYPresentationViewController * _Nullable)presentationControllerFor:(NSString * _Nonnull)placementId contentId:(NSString * _Nullable)contentId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific placement Id.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     placementId: the placementId of a group of presentations
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (UIViewController * _Nullable)presentationControllerFor:(NSString * _Nonnull)placementId loaded:(void (^ _Nullable)(PLYPresentationViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method loads a presentation for a specific placement Id.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     contentId: an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     fetchCompletion: block called when presentation has been loaded and is ready to be displayed.
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (void)fetchPresentationWith:(NSString * _Nullable)presentationVendorId contentId:(NSString * _Nullable)contentId fetchCompletion:(void (^ _Nullable)(PLYPresentation * _Nullable, NSError * _Nullable))fetchCompletion completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion loadedCompletion:(void (^ _Nullable)(void))loadedCompletion;
/// This method loads a presentation for a specific presentation Id.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     fetchCompletion: block called when presentation has been loaded and is ready to be displayed.
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (void)fetchPresentationWith:(NSString * _Nullable)presentationVendorId fetchCompletion:(void (^ _Nullable)(PLYPresentation * _Nullable, NSError * _Nullable))fetchCompletion completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion loadedCompletion:(void (^ _Nullable)(void))loadedCompletion;
/// This method loads a presentation for a specific placement Id.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     placementId: the placementId identifying where the user was in your app
///   </li>
///   <li>
///     fetchCompletion: block called when presentation has been loaded and is ready to be displayed.
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (void)fetchPresentationFor:(NSString * _Nonnull)placementId fetchCompletion:(void (^ _Nullable)(PLYPresentation * _Nullable, NSError * _Nullable))fetchCompletion completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion loadedCompletion:(void (^ _Nullable)(void))loadedCompletion;
/// This method loads a presentation for a specific placement Id.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     placementId: the placementId identifying where the user was in your app
///   </li>
///   <li>
///     contentId: an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     fetchCompletion: block called when presentation has been loaded and is ready to be displayed.
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (void)fetchPresentationFor:(NSString * _Nonnull)placementId contentId:(NSString * _Nullable)contentId fetchCompletion:(void (^ _Nullable)(PLYPresentation * _Nullable, NSError * _Nullable))fetchCompletion completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion loadedCompletion:(void (^ _Nullable)(void))loadedCompletion;
/// This method closes the current paywall displayed
+ (void)closeDisplayedPresentation;
/// This method is used to notify Purchasely that a client paywall has been opened.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentation: The presentation fetched with <code>fetchPresentation</code> method.
///   </li>
/// </ul>
+ (void)clientPresentationOpenedWith:(PLYPresentation * _Nullable)presentation;
/// This method is used to notify Purchasely that a client paywall has been closed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentation: The presentation fetched with <code>fetchPresentation</code> method.
///   </li>
/// </ul>
+ (void)clientPresentationClosedWith:(PLYPresentation * _Nullable)presentation;
+ (UIViewController * _Nullable)subscriptionsController SWIFT_WARN_UNUSED_RESULT;
+ (UIViewController * _Nullable)subscriptionControllerFor:(PLYSubscription * _Nonnull)subscription SWIFT_WARN_UNUSED_RESULT;
+ (UIViewController * _Nonnull)cancellationSurveyControllerFor:(PLYProduct * _Nullable)product selected:(void (^ _Nonnull)(enum PLYCancellationReason))selected SWIFT_WARN_UNUSED_RESULT;
/// Sets a delegate callback to receive all events tracked by the SDK. This allows integrators to observe and react to events happening within the SDK.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     event: The <code>PLYEvent</code> that was tracked. This enum provides information about the type of event.
///   </li>
///   <li>
///     parameters: An optional dictionary containing additional parameters associated with the event. This can provide more context about the event.
///   </li>
/// </ul>
/// \param callback A closure that will be called whenever an event is tracked.
///
+ (void)setEventDelegate:(void (^ _Nonnull)(enum PLYEvent, NSDictionary<NSString *, id> * _Nullable))callback;
/// This method must be called inside the AppDelegate open url method or SceneDelegate willConnectTo and openURLContexts
/// Check the documentation: https://docs.purchasely.com/advanced-features/deeplinks-and-automations
/// The controller will be displayed above the current controller.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     url: the URL of the deeplink to open
///   </li>
/// </ul>
+ (BOOL)isDeeplinkHandledWithDeeplink:(NSURL * _Nonnull)url;
/// This method performs a Promotional Offer signature with StoreKit 2
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     plan: the PLYPlan that you setup in Purchasely admin
///   </li>
///   <li>
///     promoOffer: the PLYPromoOffer corresponding of the promotional offer that you setup in Purchasely admin and that is referring to your AppStore Connect promotional offers setup.
///   </li>
///   <li>
///     success: the block called when the signature was completed from end to end
///   </li>
///   <li>
///     failure: the block called when any error occured. The error can be displayed to the user using localizedDescription
///   </li>
/// </ul>
+ (void)signPromotionalOfferWithPlan:(PLYPlan * _Nonnull)plan promoOffer:(PLYPromoOffer * _Nonnull)promoOffer success:(void (^ _Nonnull)(PLYOfferSignature * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_AVAILABILITY(watchos,introduced=8.0) SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(macos,introduced=12.0) SWIFT_AVAILABILITY(ios,introduced=12.2);
/// This method performs a Promotional Offer signature with StoreKit 2
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     storeProductId: Apple’s ProductId for the item purchased
///   </li>
///   <li>
///     storeOfferId: the promotional offer’s identifier referring to your AppStore Connect promotional offers setup.
///   </li>
///   <li>
///     success: the block called when the signature was completed from end to end
///   </li>
///   <li>
///     failure: the block called when any error occured. The error can be displayed to the user using localizedDescription
///   </li>
/// </ul>
+ (void)signPromotionalOfferWithStoreProductId:(NSString * _Nonnull)storeProductId storeOfferId:(NSString * _Nonnull)storeOfferId success:(void (^ _Nonnull)(PLYOfferSignature * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_AVAILABILITY(watchos,introduced=8.0) SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(macos,introduced=12.0) SWIFT_AVAILABILITY(ios,introduced=12.2);
/// This method performs a purchase on an plan of a Purchasely product
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     plan: the PLYPlan that you setup in Purchasely admin
///   </li>
///   <li>
///     success: the block called when the purchase was completed from end to end
///   </li>
///   <li>
///     contentId: (optional) an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     failure: the block called when any error occured. The error can be displayed to the user using localizedDescription
///   </li>
/// </ul>
+ (void)purchaseWithPlan:(PLYPlan * _Nonnull)plan contentId:(NSString * _Nullable)contentId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method performs a purchase on an plan of a Purchasely product.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     plan: the PLYPlan that you setup in Purchasely admin
///   </li>
///   <li>
///     success: the block called when the purchase was completed from end to end
///   </li>
///   <li>
///     failure: the block called when any error occured. The error can be displayed to the user using localizedDescription
///   </li>
/// </ul>
+ (void)purchaseWithPlan:(PLYPlan * _Nonnull)plan success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method performs a purchase on an plan of a Purchasely product with specified Promotional Offer
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     plan: the PLYPlan that you setup in Purchasely admin
///   </li>
///   <li>
///     contentId: (optional) an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     storeOfferId: the promotional offer’s identifier referring to your AppStore Connect promotional offers setup.
///   </li>
///   <li>
///     success: the block called when the purchase was completed from end to end
///   </li>
///   <li>
///     failure: the block called when any error occured. The error can be displayed to the user using localizedDescription
///   </li>
/// </ul>
+ (void)purchaseWithPromotionalOfferWithPlan:(PLYPlan * _Nonnull)plan contentId:(NSString * _Nullable)contentId storeOfferId:(NSString * _Nonnull)storeOfferId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_AVAILABILITY(watchos,introduced=8.0) SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(macos,introduced=12.0) SWIFT_AVAILABILITY(ios,introduced=12.2);
/// <em>Mode: Observer, PaywallObserver</em>
/// This method <em>must</em> be called right after a purchase is made using an SDK that is using StoreKit2, but you don’t have direct access to <em>Product.PurchaseResult</em>, in order for our back-end to synchronize this transaction for the current user.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     productId: Apple’s ProductId for the item purchased
///   </li>
///   <li>
///     an error is thrown if transaction cannot be verified by Apple, or if an error occurs when synchronizing with our back-end.
///   </li>
/// </ul>
///
/// throws:
///
+ (void)syncPurchaseFor:(NSString * _Nonnull)productId completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(watchos,introduced=8.0) SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(macos,introduced=12.0) SWIFT_AVAILABILITY(ios,introduced=15.0);
/// This method is used to restore previous purchases. Some might be successful and some in error.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     success: The closure that is called when at least one item was successfully restored. It might contain an error in case some items weren’t restored successfully.
///   </li>
///   <li>
///     failure: The closure that is called when at no item was restored
///   </li>
/// </ul>
+ (void)restoreAllProductsWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method is used to synchronize previous purchases with our backend. Some might be successful and some in error.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     success: The closure that is called when at least one item was successfully synchronized. It might contain an error in case some items weren’t restored successfully.
///   </li>
///   <li>
///     failure: The closure that is called when no item was synchronized
///   </li>
/// </ul>
+ (void)synchronizeWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Retrieves all currently collected built-in attributes.
///
/// returns:
/// A dictionary containing the built-in attributes, where the keys are the attribute names (String) and the values are the corresponding attribute values (Any).
+ (NSDictionary<NSString *, id> * _Nonnull)getBuiltInAttributes SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a specific built-in attribute by its key.
/// \param key The key of the built-in attribute to retrieve.
///
///
/// returns:
/// The value of the built-in attribute associated with the given key, or nil if the attribute does not exist.
+ (id _Nullable)getBuiltInAttributeWith:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// A dictionary of all user attributes currently stored.
/// Use this to inspect all attributes previously set for the user (e.g., name, age, is_premium).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDictionary<NSString *, id> * _Nonnull userAttributes;)
+ (NSDictionary<NSString *, id> * _Nonnull)userAttributes SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a specific user attribute value by its key.
/// Example: <code>getUserAttribute(for: "age")</code>
/// \param key The key of the user attribute you want to retrieve.
///
///
/// returns:
/// The attribute value if found, otherwise <code>nil</code>.
+ (id _Nullable)getUserAttributeFor:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Sets a string-type user attribute.
/// Example: <code>setUserAttribute(withStringValue: "Gold", forKey: "subscription_tier")</code>
/// \param value The string value to associate with the key.
///
/// \param key The key under which the attribute is stored.
///
+ (void)setUserAttributeWithStringValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Sets an integer-type user attribute.
/// Example: <code>setUserAttribute(withIntValue: 28, forKey: "age")</code>
/// \param value The integer value to store.
///
/// \param key The key under which to save the attribute.
///
+ (void)setUserAttributeWithIntValue:(NSInteger)value forKey:(NSString * _Nonnull)key;
/// Sets a double-type user attribute.
/// Example: <code>setUserAttribute(withDoubleValue: 99.99, forKey: "total_spent")</code>
/// \param value The double value to store.
///
/// \param key The key under which to save the attribute.
///
+ (void)setUserAttributeWithDoubleValue:(double)value forKey:(NSString * _Nonnull)key;
/// Sets a date-type user attribute.
/// Example: <code>setUserAttribute(withDateValue: Date(), forKey: "signup_date")</code>
/// \param value The <code>Date</code> to store.
///
/// \param key The key under which to save the attribute.
///
+ (void)setUserAttributeWithDateValue:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Sets a boolean-type user attribute.
/// Example: <code>setUserAttribute(withBoolValue: true, forKey: "is_premium")</code>
/// \param value The boolean value to store.
///
/// \param key The key under which to save the attribute.
///
+ (void)setUserAttributeWithBoolValue:(BOOL)value forKey:(NSString * _Nonnull)key;
/// Sets a user attribute with an array of boolean values for the given key.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     value: An array of boolean values to set for the attribute.
///   </li>
///   <li>
///     key: The key associated with the user attribute. This key will be used to identify and retrieve the attribute.
///   </li>
/// </ul>
+ (void)setUserAttributeWithBoolArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Sets a user attribute with an array of integer values for the given key.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     value: An array of integer values to set for the attribute.
///   </li>
///   <li>
///     key: The key associated with the user attribute. This key will be used to identify and retrieve the attribute.
///   </li>
/// </ul>
+ (void)setUserAttributeWithIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Sets a user attribute with an array of string values for the given key.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     value: An array of string values to set for the attribute.
///   </li>
///   <li>
///     key: The key associated with the user attribute. This key will be used to identify and retrieve the attribute.
///   </li>
/// </ul>
+ (void)setUserAttributeWithStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Sets a user attribute with an array of double values for the given key.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     value: An array of double values to set for the attribute.
///   </li>
///   <li>
///     key: The key associated with the user attribute. This key will be used to identify and retrieve the attribute.
///   </li>
/// </ul>
+ (void)setUserAttributeWithDoubleArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Increments a numerical user attribute by a specified value. If the attribute does not exist, it will be created with the initial increment value.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     key: The key of the numerical user attribute to increment.
///   </li>
///   <li>
///     value: The value to increment the attribute by. Defaults to 1.
///   </li>
/// </ul>
+ (void)incrementUserAttributeWithKey:(NSString * _Nonnull)key value:(NSInteger)value;
/// Decrements a numerical user attribute by a specified value. If the attribute does not exist, it will be created with the initial negative decrement value.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     key: The key of the numerical user attribute to decrement.
///   </li>
///   <li>
///     value: The value to decrement the attribute by. Defaults to 1.
///   </li>
/// </ul>
+ (void)decrementUserAttributeWithKey:(NSString * _Nonnull)key value:(NSInteger)value;
/// Sets multiple user attributes at once using a dictionary.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     attributes: A dictionary where the keys are the attribute names (String) and the values are the corresponding attribute values (Any). Supported value types are Bool, Int, Double, String, and arrays of these types.
///   </li>
/// </ul>
+ (void)setUserAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
/// Clears all user-defined attributes. This will remove all custom attributes that have been set.
+ (void)clearUserAttributes;
/// Clears a specific user attribute based on its key.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     key: The key of the user attribute to remove.
///   </li>
/// </ul>
+ (void)clearUserAttributeForKey:(NSString * _Nonnull)key;
/// Clears all built-in attributes managed by the SDK.
+ (void)clearBuiltInAttributes;
/// Adds a dynamic offering that will override the default ones displayed in the paywall.
/// Use this when you want to force a specific plan (and optionally offer) to be shown in a specific context.
/// \param reference A unique key to identify this dynamic offering (e.g., screen identifier).
///
/// \param planVendorId The plan to display in the offering.
///
/// \param offerVendorId (Optional) The specific offer to highlight. If nil, default logic applies.
///
/// \param completion Called with <code>true</code> if the dynamic offering was successfully added.
///
+ (void)setDynamicOfferingWithReference:(NSString * _Nonnull)reference planVendorId:(NSString * _Nonnull)planVendorId offerVendorId:(NSString * _Nullable)offerVendorId completion:(void (^ _Nonnull)(BOOL))completion;
/// Retrieves the list of currently active dynamic offerings (synchronous version).
/// Use this to inspect what dynamic offerings are currently registered in memory.
+ (NSArray<PLYOffering *> * _Nonnull)getDynamicOfferings SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the list of currently active dynamic offerings asynchronously.
/// Useful when needing to load the offerings from disk or async sources.
/// \param completion Closure called with the current dynamic offerings.
///
+ (void)getDynamicOfferingsWithCompletion:(void (^ _Nonnull)(NSArray<PLYOffering *> * _Nonnull))completion;
/// Removes a specific dynamic offering by its reference key.
/// Use this to stop overriding the default offering for a specific context.
/// \param reference The unique reference used when the offering was added.
///
+ (void)removeDynamicOfferingWithReference:(NSString * _Nonnull)reference;
/// Removes all dynamic offerings from memory and storage.
/// Call this to reset the offering logic and go back to the default configuration.
+ (void)clearDynamicOfferings;
+ (void)setAttribute:(enum PLYAttribute)attribute value:(NSString * _Nonnull)value;
/// Sets the theme mode for the SDK’s UI elements. This setting will influence the visual appearance of any SDK-provided UI.
/// \param mode The desired theme mode to apply.
///
+ (void)setThemeMode:(enum PLYThemeMode)mode;
/// This method is used to trigger an event telling Purchasely that a content has been consumed through a subscription.
+ (void)userDidConsumeSubscriptionContent;
@end

/// WARNING: Add new attribute to the end and always check the list is in the same order than Android
/// It is very important to have the same order for bridges SDK (RN, Flutter, Cordova, Unity) to work properly
/// *
typedef SWIFT_ENUM(NSInteger, PLYAttribute, open) {
  PLYAttributeFirebaseAppInstanceId = 0,
  PLYAttributeAirshipChannelId = 1,
  PLYAttributeAirshipUserId = 2,
  PLYAttributeBatchInstallationId = 3,
  PLYAttributeAdjustId = 4,
  PLYAttributeAppsflyerId = 5,
  PLYAttributeOneSignalPlayerId = 6,
  PLYAttributeMixpanelDistinctId = 7,
  PLYAttributeClevertapId = 8,
  PLYAttributeSendinblueUserEmail = 9,
  PLYAttributeIterableUserEmail = 10,
  PLYAttributeIterableUserId = 11,
  PLYAttributeAtInternetIdClient = 12,
  PLYAttributeMParticleUserId = 13,
  PLYAttributeCustomerioUserId = 14,
  PLYAttributeCustomerioUserEmail = 15,
  PLYAttributeBranchUserDeveloperIdentity = 16,
  PLYAttributeAmplitudeUserId = 17,
  PLYAttributeAmplitudeDeviceId = 18,
  PLYAttributeMoengageUniqueId = 19,
  PLYAttributeOneSignalExternalId = 20,
  PLYAttributeBatchCustomUserId = 21,
  PLYAttributeOneSignalUserId = 22,
};

/// Represents the available theme modes for the SDK’s UI elements.
/// <ul>
///   <li>
///     light: Use a light color scheme.
///   </li>
///   <li>
///     dark: Use a dark color scheme.
///   </li>
///   <li>
///     system: Follow the system’s current appearance setting (light or dark mode).
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PLYThemeMode, open) {
  PLYThemeModeLight = 0,
  PLYThemeModeDark = 1,
  PLYThemeModeSystem = 2,
};










SWIFT_CLASS("_TtC10Purchasely16StorekitSettings")
@interface StorekitSettings : NSObject
- (nonnull instancetype)initWithShouldUseStorekit2IfAvailable:(BOOL)shouldUseStorekit2IfAvailable simulateAskToBuy:(BOOL)simulateAskToBuy OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) StorekitSettings * _Nonnull storeKit1;)
+ (StorekitSettings * _Nonnull)storeKit1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) StorekitSettings * _Nonnull storeKit2;)
+ (StorekitSettings * _Nonnull)storeKit2 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






















#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
