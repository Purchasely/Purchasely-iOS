// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-tvos11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Purchasely
import AVFoundation
import AVKit
import CommonCrypto
import Foundation
@_exported import Purchasely
import StoreKit
import Swift
import TVUIKit
import UIKit
import _Concurrency
extension Swift.Array {
  public subscript(safe index: Swift.Int) -> Element? {
    get
  }
}
@inlinable @inline(__always) internal func isHighTag(_ number: Swift.UInt8) -> Swift.Bool {
    return number == 0x1f
}
@inlinable @inline(__always) internal func lastTagNumber(_ byte: Swift.UInt8) -> Swift.Bool {
    return (byte & 0x80) == 0x1f
}
@inlinable @inline(__always) internal func lengthIsShortForm(_ byte: Swift.UInt8) -> Swift.Bool {
    return (byte & 0x80) == 0
}
@inlinable @inline(__always) internal func longFormLength(_ byte: Swift.UInt8) -> Swift.UInt8 {
    return (byte & 0x7f)
}
@inlinable @inline(__always) internal func highBits(_ field: Swift.UInt8, _ cnt: Swift.UInt8) -> Swift.UInt8 {
    return field >> (UInt8(MemoryLayout.size(ofValue: field))*8 - cnt)
}
@inlinable @inline(__always) internal func tlvConstructed(tag: Swift.UInt8) -> Swift.Bool {
    return tag & 0x20 != 0
}
public func loc(_ textToTranslate: Swift.String, comment: Swift.String = "", language: Swift.String? = nil) -> Swift.String
public enum LocalReceiptError : Swift.Error {
  case initializationFailed
  case receiptRefreshingInProgress
  case destroyRefreshSession
  public static func == (a: LocalReceiptError, b: LocalReceiptError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.NSNotification.Name {
  public static let ply_purchasedSubscription: Foundation.Notification.Name
}
@objc public enum PLYAlertMessage : Swift.Int {
  case commonError
  case inAppSuccess
  case inAppDeferred
  case inAppSuccessUnauthentified
  case inAppRestorationSuccess
  case inAppRestorationError
  case inAppError
  case unsubscribeGoogle
  case unsubscribeiOS
  case unsubscribeAmazon
  public var title: Swift.String {
    get
  }
  public var content: Swift.String? {
    get
  }
  public var buttonTitle: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYAppTechnology : Swift.Int {
  case cordova
  case flutter
  case native
  case macCatalyst
  case reactNative
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYCancellationReason : Swift.Int {
  case price = 1
  case betterApp = 2
  case noLongerUseful = 3
  case noUse = 4
  case technicalIssues = 5
  case other = 6
  case unknown = 7
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYComponentError : Swift.Error {
  case unknownComponentType
  public static func == (a: PLYComponentError, b: PLYComponentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum PLYCustomPropertyDataType : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case int
  case float
  case string
  case date
  case bool
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PLYCustomPropertyDataType]
  public typealias RawValue = Swift.Int
  public static var allCases: [PLYCustomPropertyDataType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYEnvironment : Swift.Int {
  case prod
  case staging
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYError : Swift.Error {
  case application(message: Swift.String?, code: Swift.String?)
  case parsing
  case network(statusCode: Swift.Int?, error: (any Swift.Error)?)
  case request
  case configuration
  case productNotFound
  case deferredPayment
  case psd2Required
  case absentReceipt
  case validationFailed
  case clientInvalid
  case paymentCancelled
  case paymentInvalid
  case paymentNotAllowed
  case storeProductNotAvailable
  case cloudServicePermissionDenied
  case cloudServiceNetworkConnectionFailed
  case cloudServiceRevoked
  case purchaseAlreadyRunning
  case restorationAlreadyRunning
  case noProductsToRestore
  case restorationFailedWithErrors([any Swift.Error])
  case restorationPartial([Swift.String], [any Swift.Error])
  case receiptValidationTimedOut
  case untrackedEvent
  case tooManyRequests(Swift.String?)
  case runningMode
  case unverifiedTransaction(Swift.String)
  case storekit2NotAvailable
  case unknown
}
extension PLYError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public enum PLYEvent : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case appConfigured
  case appInstalled
  case appStarted
  case appUpdated
  case cancellationReasonPublished
  case carouselSlideSwiped
  case deeplinkOpened
  case inAppDeferred
  case inAppPurchaseFailed
  case inAppPurchased
  case inAppPurchasing
  case inAppRenewed
  case inAppRestored
  case linkOpened
  case loginTapped
  case planSelected
  case presentationOpened
  case presentationSelected
  case presentationViewed
  case presentationLoaded
  case promoCodeTapped
  case purchaseCancelled
  case purchaseCancelledByApp
  case purchaseFromStoreTapped
  case purchaseTapped
  case receiptCreated
  case receiptFailed
  case receiptValidated
  case restoreFailed
  case restoreStarted
  case restoreSucceeded
  case restoreTapped
  case productFetchError
  case subscriptionCancelTapped
  case subscriptionDetailsViewed
  case subscriptionPlanTapped
  case subscriptionsListViewed
  case subscriptionsTransferred
  case userLoggedIn
  case userLoggedOut
  case presentationClosed
  case subscriptionContentUsed
  public var name: Swift.String {
    get
  }
  public var type: PLYEventType {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PLYEvent]
  public typealias RawValue = Swift.Int
  public static var allCases: [PLYEvent] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.NSString {
  @objc public static func fromPLYEvent(_ event: PLYEvent) -> Swift.String
}
@objc public enum PLYEventProperty : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case template
  case sdkVersion
  case eventName
  case eventCreatedAtMs
  case eventCreated
  case displayedPresentation
  case isFallbackPresentation
  case userId
  case anonymousUserId
  case purchasablePlans
  case deeplinkIdentifier
  case sourceIdentifier
  case selectedPlan
  case plan
  case previousSelectedPlan
  case linkIdentifier
  case carousels
  case device
  case osVersion
  case type
  case errorMessage
  case language
  case planType
  case purchaselyPlanId
  case store
  case storeCountry
  case storeProductId
  case priceInCustomerCurrency
  case customerCurrency
  case period
  case duration
  case introPriceInCustomerCurrency
  case introPeriod
  case introDuration
  case freePeriod
  case freeDuration
  case hasFreeTrial
  case promotionalOfferPriceInCustomerCurrency
  case promotionalOfferPeriod
  case promotionalOfferDuration
  case discountReferent
  case discountPercentageComparisonToReferent
  case discountPriceComparisonToReferent
  case isDefault
  case selectedSlide
  case numberOfSlides
  case isCarouselAutoPlaying
  case defaultSlide
  case previousSlide
  case selectedProduct
  case planChangeType
  case cancellationReasonId
  case cancellationReason
  case runningSubscriptions
  case product
  case selectedPresentation
  case previousSelectedPresentation
  case placementId
  case audienceId
  case abTestId
  case abTestVariantId
  case contentId
  case sessionDuration
  case sessionCount
  case screenDuration
  case screenDisplayedAt
  case screenDisplayedAtMs
  case appInstalledAt
  case appInstalledAtMs
  case paywallrequestDurationInMs
  case storeKitVersion
  case presentationType
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PLYEventProperty]
  public typealias RawValue = Swift.Int
  public static var allCases: [PLYEventProperty] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYEventType : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case promotedIAP
  case paywallUserBehavior
  case payment
  case SDKEvents
  case receipts
  case cancellation
  case restorePurchase
  case subscriptionTransfer
  case login
  case phoneSettings
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PLYEventType]
  public typealias RawValue = Swift.Int
  public static var allCases: [PLYEventType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public class PLYImage : Swift.Decodable {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum PLYLabelHighlightsError : Swift.Error {
  case invalidRange
  public static func == (a: PLYLabelHighlightsError, b: PLYLabelHighlightsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PluralType {
  case none
  case one
  case three
  case six
  case many
  public static func == (a: PluralType, b: PluralType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func PLYLocalizedPluralString(_ key: Swift.String, count: Swift.Int, language: Swift.String?) -> Swift.String
public func PLYLocalizedPluralString(_ key: Swift.String, pluralType: PluralType, language: Swift.String?) -> Swift.String
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PLYLogger : ObjectiveC.NSObject {
  @objc public enum LogLevel : Swift.Int {
    case debug
    case info
    case warn
    case error
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc public protocol PLYLogging {
  @objc func messageLogged(message: PLYMessage)
}
@_hasMissingDesignatedInitializers @objc public class PLYMessage : ObjectiveC.NSObject {
  final public let message: Swift.String
  final public let logLevel: Swift.String
  final public let date: Foundation.Date
  @objc deinit
}
@objc public class PLYPlan : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var vendorId: Swift.String
  @objc public var appleProductId: Swift.String?
  @objc public var type: PLYPlanType
  @objc public var name: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
extension PLYPlan {
  @objc dynamic public var amount: Foundation.NSDecimalNumber? {
    @objc get
  }
  @objc dynamic public var introAmount: Foundation.NSDecimalNumber? {
    @objc get
  }
  @objc dynamic public var period: Swift.String? {
    @objc get
  }
  @objc dynamic public var apiPeriod: Swift.String? {
    @objc get
  }
  @objc dynamic public var duration: Swift.Int {
    @objc get
  }
  @objc dynamic public var currencyCode: Swift.String? {
    @objc get
  }
  @objc dynamic public var currencySymbol: Swift.String? {
    @objc get
  }
  @objc dynamic public func localizedFullPrice(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedPrice(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedPeriod(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public var hasIntroductoryPrice: Swift.Bool {
    @objc get
  }
  @objc dynamic public var hasFreeTrial: Swift.Bool {
    @objc get
  }
  @objc dynamic public func localizedFullIntroductoryPrice(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedIntroductoryPrice(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedIntroductoryPeriod(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func introductoryPeriod(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedIntroductoryDuration(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func introductoryDuration(language: Swift.String? = nil) -> Swift.Int
}
extension PLYPlan {
  @objc dynamic public func priceDifference(comparedTo plan: PLYPlan) -> Swift.String?
  @objc dynamic public func priceDifferenceInPercentage(to plan: PLYPlan) -> Swift.String?
}
extension PLYPlan {
  @objc dynamic public var isUserEligibleForIntroductoryOffer: Swift.Bool {
    @objc get
  }
}
@objc public enum PLYPlanType : Swift.Int, Swift.Codable {
  case consumable
  case nonConsumable
  case autoRenewingSubscription
  case nonRenewingSubscription
  case unknown
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class PLYPresentation : ObjectiveC.NSObject {
  @objc final public let id: Swift.String?
  @objc final public let language: Swift.String
  @objc final public let placementId: Swift.String?
  @objc final public let audienceId: Swift.String?
  @objc final public let abTestId: Swift.String?
  @objc final public let abTestVariantId: Swift.String?
  @objc final public let type: PLYPresentationType
  @objc final public let controller: PLYPresentationViewController?
  @objc final public let plans: [Swift.String]
  @objc deinit
}
@objc public enum PLYPresentationType : Swift.Int {
  case normal = 0
  case fallback
  case deactivated
  case client
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYPresentationAction : Swift.Int {
  case close
  case login
  case navigate
  case purchase
  case restore
  case openPresentation
  case promoCode
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class PLYPresentationActionParameters : ObjectiveC.NSObject {
  @objc public var url: Foundation.URL?
  @objc public var title: Swift.String?
  @objc public var plan: PLYPlan?
  @objc public var presentation: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PLYPresentationInfo : ObjectiveC.NSObject {
  @objc public var controller: UIKit.UIViewController?
  @objc public var contentId: Swift.String?
  @objc public var presentationId: Swift.String?
  @objc public var placementId: Swift.String?
  @objc public var audienceId: Swift.String?
  @objc public var abTestVariantId: Swift.String?
  @objc public var abTestId: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PLYPresentationViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var isReady: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isDefaultPaywall: Swift.Bool {
    get
  }
  @available(tvOS, unavailable)
  @_Concurrency.MainActor(unsafe) public func setStatusBarHidden(shouldHide: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class PLYProduct : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var vendorId: Swift.String
  @objc public var plans: [PLYPlan]
  @objc public var name: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public typealias PLYProductViewControllerCompletionBlock = (PLYProductViewControllerResult, PLYPlan?) -> Swift.Void
public typealias PLYPresentationFetchCompletionBlock = (PLYPresentation?, (any Swift.Error)?) -> Swift.Void
@objc public enum PLYProductViewControllerResult : Swift.Int {
  case purchased
  case cancelled
  case restored
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYRunningMode : Swift.Int, Swift.CaseIterable {
  case transactionOnly
  case observer
  case paywallObserver
  case full
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PLYRunningMode]
  public typealias RawValue = Swift.Int
  public static var allCases: [PLYRunningMode] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYSubscriptionError : Swift.Error {
  case couldntFindProduct
  public static func == (a: PLYSubscriptionError, b: PLYSubscriptionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class PLYSubscription : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var product: PLYProduct
  @objc public var plan: PLYPlan
  @objc public var subscriptionSource: PLYSubscriptionSource
  @objc public var nextRenewalDate: Foundation.Date?
  @objc public var cancelledDate: Foundation.Date?
  @objc public var originalPurchasedDate: Foundation.Date?
  @objc public var purchasedDate: Foundation.Date?
  @objc public var offerType: PLYSubscriptionOfferType
  @objc public var status: PLYSubscriptionStatus
  @objc public var environment: PLYSubscriptionEnvironment
  @objc public var storeCountry: Swift.String?
  @objc public var isFamilyShared: Swift.Bool
  @objc public var contentId: Swift.String?
  @objc public var offerIdentifier: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  @objc public func unsubscribe()
  @objc deinit
}
@objc public enum PLYSubscriptionEnvironment : Swift.Int {
  case sandbox
  case production
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYSubscriptionOfferTypeError : Swift.Error {
  case invalidStringFormat
  public static func == (a: PLYSubscriptionOfferTypeError, b: PLYSubscriptionOfferTypeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum PLYSubscriptionOfferType : Swift.Int {
  case none
  case freeTrial
  case introOffer
  case promoCode
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYSubscriptionSourceError : Swift.Error {
  case invalidStringFormat
  public static func == (a: PLYSubscriptionSourceError, b: PLYSubscriptionSourceError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum PLYSubscriptionSource : Swift.Int {
  case appleAppStore
  case googlePlayStore
  case amazonAppstore
  case huaweiAppGallery
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYSubscriptionStatus : Swift.Int {
  case autoRenewing
  case onHold
  case inGracePeriod
  case autoRenewingCanceled
  case deactivated
  case revoked
  case paused
  case unpaid
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYUIControllerType : Swift.Int {
  case subscriptionList
  case productPage
  case webPage
  case cancellationSurvey
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PLYUIDelegate {
  @objc func display(controller: UIKit.UIViewController, type: PLYUIControllerType, from sourceController: UIKit.UIViewController?)
  @objc func display(alert: PLYAlertMessage, error: (any Swift.Error)?)
}
public typealias PLYSuccessErrorClosure = (Swift.Bool, (any Swift.Error)?) -> Swift.Void
public typealias PLYPaywallLoadingClosure = (PLYPresentationViewController?, Swift.Bool, (any Swift.Error)?) -> Swift.Void
public typealias PLYLoginTappedHandler = ((UIKit.UIViewController, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void)
public typealias PLYPaywallActionsInterceptor = ((PLYPresentationAction, PLYPresentationActionParameters?, PLYPresentationInfo?, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void)
public typealias PLYPurchaseConfirmationHandler = ((UIKit.UIViewController, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void)
public typealias PLYLoginCompletionHandler = (Swift.Bool) -> Swift.Void
public typealias PLYBoolClosure = (Swift.Bool) -> Swift.Void
public typealias PLYVoidClosure = () -> Swift.Void
public typealias PLYErrorClosure = (any Swift.Error) -> ()
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Purchasely : ObjectiveC.NSObject {
  @objc deinit
}
@objc public protocol PLYEventDelegate {
  @objc func eventTriggered(_ event: PLYEvent, properties: [Swift.String : Any]?)
}
extension Purchasely {
  @objc public static var anonymousUserId: Swift.String {
    @objc get
  }
  @objc dynamic public class func start(withAPIKey apiKey: Swift.String, appUserId: Swift.String? = nil, runningMode: PLYRunningMode = .full, eventDelegate: (any PLYEventDelegate)? = nil, uiDelegate: (any PLYUIDelegate)? = nil, paywallActionsInterceptor: PLYPaywallActionsInterceptor? = nil, storekitSettings: StorekitSettings = StorekitSettings.default, logLevel: PLYLogger.LogLevel = .error, initialized: PLYSuccessErrorClosure? = nil)
  @objc dynamic public class func setEventDelegate(_ eventDelegate: (any PLYEventDelegate)?)
  @objc dynamic public class func setUIDelegate(_ uiDelegate: (any PLYUIDelegate)?)
  @objc dynamic public class func setPaywallActionsInterceptor(_ paywallActionsInterceptor: PLYPaywallActionsInterceptor?)
  @objc dynamic public class func userLogin(with appUserId: Swift.String)
  @objc dynamic public class func userLogin(with appUserId: Swift.String, shouldRefresh: PLYLoginCompletionHandler?)
  @objc dynamic public class func userLogout()
  @objc dynamic public class func setDefaultPresentationResultHandler(_ defaultPresentationResultHandler: PLYProductViewControllerCompletionBlock?)
  @objc dynamic public class func setLanguage(from locale: Foundation.Locale?)
  @objc dynamic public class func isReadyToPurchase(_ ready: Swift.Bool)
  @objc dynamic public class func setEnvironment(_ environment: PLYEnvironment)
  @objc dynamic public class func setLogLevel(_ logLevel: PLYLogger.LogLevel)
  @objc dynamic public class func setAppTechnology(_ technology: PLYAppTechnology)
  @objc dynamic public class func setSdkBridgeVersion(_ sdkBridgeVersion: Swift.String?)
  @objc dynamic public class func addLogger(_ logger: any PLYLogging)
  @objc dynamic public class func allProducts(success: @escaping ([PLYProduct]) -> Swift.Void, failure: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc dynamic public class func product(with vendorId: Swift.String, success: @escaping (PLYProduct) -> Swift.Void, failure: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc dynamic public class func plan(with vendorId: Swift.String, success: @escaping (PLYPlan) -> Swift.Void, failure: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc dynamic public class func userSubscriptions(success: @escaping ([PLYSubscription]?) -> Swift.Void, failure: @escaping PLYErrorClosure)
  @objc dynamic public class func productController(for productVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, contentId: Swift.String? = nil, loaded: PLYPaywallLoadingClosure? = nil, completion: PLYProductViewControllerCompletionBlock? = nil) -> PLYPresentationViewController?
  @objc dynamic public class func productController(for productVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, loaded: PLYPaywallLoadingClosure? = nil, completion: PLYProductViewControllerCompletionBlock? = nil) -> PLYPresentationViewController?
  @objc dynamic public class func planController(for planVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, contentId: Swift.String?, loaded: PLYPaywallLoadingClosure? = nil, completion: PLYProductViewControllerCompletionBlock? = nil) -> PLYPresentationViewController?
  @objc dynamic public class func planController(for planVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, loaded: PLYPaywallLoadingClosure? = nil, completion: PLYProductViewControllerCompletionBlock? = nil) -> PLYPresentationViewController?
  @objc dynamic public class func presentationController(with presentationVendorId: Swift.String? = nil, contentId: Swift.String?, loaded: PLYPaywallLoadingClosure? = nil, completion: PLYProductViewControllerCompletionBlock? = nil) -> PLYPresentationViewController?
  @objc dynamic public class func presentationController(with presentationVendorId: Swift.String? = nil, loaded: PLYPaywallLoadingClosure? = nil, completion: PLYProductViewControllerCompletionBlock? = nil) -> PLYPresentationViewController?
  @objc dynamic public class func presentationController(for placementId: Swift.String, contentId: Swift.String?, loaded: PLYPaywallLoadingClosure? = nil, completion: PLYProductViewControllerCompletionBlock? = nil) -> PLYPresentationViewController?
  @objc dynamic public class func presentationController(for placementId: Swift.String, loaded: PLYPaywallLoadingClosure? = nil, completion: PLYProductViewControllerCompletionBlock? = nil) -> UIKit.UIViewController?
  @objc dynamic public class func fetchPresentation(with presentationVendorId: Swift.String?, contentId: Swift.String?, fetchCompletion: PLYPresentationFetchCompletionBlock? = nil, completion: PLYProductViewControllerCompletionBlock? = nil)
  @objc dynamic public class func fetchPresentation(with presentationVendorId: Swift.String?, fetchCompletion: PLYPresentationFetchCompletionBlock? = nil, completion: PLYProductViewControllerCompletionBlock? = nil)
  @objc dynamic public class func fetchPresentation(for placementId: Swift.String, fetchCompletion: PLYPresentationFetchCompletionBlock? = nil, completion: PLYProductViewControllerCompletionBlock? = nil)
  @objc dynamic public class func fetchPresentation(for placementId: Swift.String, contentId: Swift.String?, fetchCompletion: PLYPresentationFetchCompletionBlock? = nil, completion: PLYProductViewControllerCompletionBlock? = nil)
  @objc dynamic public class func closeDisplayedPresentation()
  @objc dynamic public class func clientPresentationOpened(with presentation: PLYPresentation?)
  @objc dynamic public class func clientPresentationClosed(with presentation: PLYPresentation?)
  @objc dynamic public class func subscriptionsController() -> UIKit.UIViewController?
  @objc dynamic public class func subscriptionController(for subscription: PLYSubscription) -> UIKit.UIViewController?
  @objc dynamic public class func cancellationSurveyController(for product: PLYProduct?, selected: @escaping ((PLYCancellationReason) -> ())) -> UIKit.UIViewController
  @discardableResult
  @objc dynamic public class func handle(deeplink url: Foundation.URL) -> Swift.Bool
  @objc public static func purchase(plan: PLYPlan, contentId: Swift.String?, success: @escaping PLYVoidClosure, failure: @escaping PLYErrorClosure)
  @objc public static func purchase(plan: PLYPlan, success: @escaping PLYVoidClosure, failure: @escaping PLYErrorClosure)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static func syncPurchase(with purchaseResult: StoreKit.Product.PurchaseResult) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @objc public static func syncPurchase(for productId: Swift.String) async throws
  #endif
  @objc public static func restoreAllProducts(success: @escaping PLYVoidClosure, failure: @escaping PLYErrorClosure)
  @objc public static func synchronize(success: @escaping PLYVoidClosure, failure: @escaping PLYErrorClosure)
  @objc public static var userAttributesAvailable: [Swift.String : Swift.String] {
    @objc get
  }
  @objc public static var userAttributes: [Swift.String : Any] {
    @objc get
  }
  @objc public static func getUserAttribute(for key: Swift.String) -> Any?
  @objc public static func setUserAttribute(withStringValue value: Swift.String, forKey key: Swift.String)
  @objc public static func setUserAttribute(withIntValue value: Swift.Int, forKey key: Swift.String)
  @objc public static func setUserAttribute(withDoubleValue value: Swift.Double, forKey key: Swift.String)
  @objc public static func setUserAttribute(withDateValue value: Foundation.Date, forKey key: Swift.String)
  @objc public static func setUserAttribute(withBoolValue value: Swift.Bool, forKey key: Swift.String)
  @objc public static func setUserAttributes(_ attributes: [Swift.String : Any])
  @objc public static func clearUserAttributes()
  @objc public static func clearUserAttribute(forKey key: Swift.String)
  @objc public enum PLYAttribute : Swift.Int {
    case amplitudeSessionId
    case amplitudeUserId
    case amplitudeDeviceId
    case firebaseAppInstanceId
    case airshipChannelId
    case airshipUserId
    case batchInstallationId
    case adjustId
    case appsflyerId
    case oneSignalPlayerId
    case mixpanelDistinctId
    case clevertapId
    case sendinblueUserEmail
    case iterableUserEmail
    case iterableUserId
    case atInternetIdClient
    case mParticleUserId
    case branchUserDeveloperIdentity
    case customerioUserEmail
    case customerioUserId
    case moengageUniqueId
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc dynamic public class func setAttribute(_ attribute: PLYAttribute, value: Swift.String)
  public class func setAttributes(_ attributes: [PLYAttribute : Swift.String])
  @objc dynamic public class func userDidConsumeSubscriptionContent()
  @available(*, unavailable, message: "With Purchasely 3.0.0, 2 parameters of the `start` method changed.\n 1. A more generic approach for interacting with paywall actions named `paywallActionsInterceptor` replaced the `confirmPurchaseHandler`.\n 2. New running modes were added alongside to `observerMode` to offer you more flexibility in Purchasely's use.")
  @objc dynamic public class func start(withAPIKey apiKey: Swift.String, appUserId: Swift.String? = nil, observerMode: Swift.Bool = false, eventDelegate: (any PLYEventDelegate)? = nil, uiDelegate: (any PLYUIDelegate)? = nil, confirmPurchaseHandler: PLYPurchaseConfirmationHandler? = nil, logLevel: PLYLogger.LogLevel = .error, initialized: PLYSuccessErrorClosure? = nil)
  @available(*, unavailable, message: "With Purchasely 3.0.0 `setLoginTappedHandler(_:)` was replaced with a more generic approach for interacting with paywall actions. You should now use the `paywallActionsInterceptor` and intercept the `login` action.")
  @objc dynamic public class func setLoginTappedHandler(_ loginTappedHandler: PLYLoginTappedHandler?)
  @available(*, unavailable, message: "With Purchasely 3.0.0 `setConfirmPurchaseHandler(_:)` was replaced with a more generic approach for interacting with paywall actions. You should now use the `paywallActionsInterceptor` and intercept the `purchase` action.")
  @objc dynamic public class func setConfirmPurchaseHandler(_ confirmPurchaseHandler: PLYPurchaseConfirmationHandler?)
  @available(*, unavailable, message: "Call `userLogin(with:)` when you have the userId or `userLogout()` when the user disconnects.")
  @objc dynamic public class func setAppUserId(_ appUserId: Swift.String?)
  @available(*, unavailable, message: "`silentRestoreAllProducts(success:failure:)` has been renamed to `synchronize(success:failure:)`")
  @objc public static func silentRestoreAllProducts(success: @escaping PLYVoidClosure, failure: @escaping PLYErrorClosure)
}
extension Purchasely : UserNotifications.UNUserNotificationCenterDelegate {
}
extension Purchasely : PLYUIDelegate {
  @objc dynamic public func display(controller: UIKit.UIViewController, type: PLYUIControllerType, from sourceController: UIKit.UIViewController?)
  @objc dynamic public func display(alert: PLYAlertMessage, error: (any Swift.Error)?)
}
extension Purchasely {
  @objc dynamic public class func showController(_ controller: UIKit.UIViewController, type: PLYUIControllerType)
}
public struct Safe<Base> : Swift.Decodable where Base : Swift.Decodable {
  public let value: Base?
  public init(from decoder: any Swift.Decoder)
}
@available(macCatalyst 14.0, iOS 11.0, tvOS 11.0, *)
extension StoreKit.SKProductStorePromotionController {
  public func resetStorePromotionsVisibility(for products: [StoreKit.SKProduct], completed: (() -> Swift.Void)?)
}
@objc public class StorekitSettings : ObjectiveC.NSObject {
  @objc public init(shouldUseStorekit2IfAvailable: Swift.Bool, simulateAskToBuy: Swift.Bool = false)
  @objc public static let `default`: StorekitSettings
  @objc deinit
}
extension Swift.String {
  public func regexMatchGroup(_ pattern: Swift.String) -> [Swift.String]?
  public func regexMatch(_ pattern: Swift.String) -> Swift.Bool
}
extension PLYAttribute : Swift.Equatable {}
extension PLYAttribute : Swift.Hashable {}
extension PLYAttribute : Swift.RawRepresentable {}
extension LocalReceiptError : Swift.Equatable {}
extension LocalReceiptError : Swift.Hashable {}
extension PLYAlertMessage : Swift.Equatable {}
extension PLYAlertMessage : Swift.Hashable {}
extension PLYAlertMessage : Swift.RawRepresentable {}
extension PLYAppTechnology : Swift.Equatable {}
extension PLYAppTechnology : Swift.Hashable {}
extension PLYAppTechnology : Swift.RawRepresentable {}
extension PLYCancellationReason : Swift.Equatable {}
extension PLYCancellationReason : Swift.Hashable {}
extension PLYCancellationReason : Swift.RawRepresentable {}
extension PLYComponentError : Swift.Equatable {}
extension PLYComponentError : Swift.Hashable {}
extension PLYCustomPropertyDataType : Swift.Equatable {}
extension PLYCustomPropertyDataType : Swift.Hashable {}
extension PLYCustomPropertyDataType : Swift.RawRepresentable {}
extension PLYEnvironment : Swift.Equatable {}
extension PLYEnvironment : Swift.Hashable {}
extension PLYEnvironment : Swift.RawRepresentable {}
extension PLYEvent : Swift.Equatable {}
extension PLYEvent : Swift.Hashable {}
extension PLYEvent : Swift.RawRepresentable {}
extension PLYEventProperty : Swift.Equatable {}
extension PLYEventProperty : Swift.Hashable {}
extension PLYEventProperty : Swift.RawRepresentable {}
extension PLYEventType : Swift.Equatable {}
extension PLYEventType : Swift.Hashable {}
extension PLYEventType : Swift.RawRepresentable {}
extension PLYLabelHighlightsError : Swift.Equatable {}
extension PLYLabelHighlightsError : Swift.Hashable {}
extension PluralType : Swift.Equatable {}
extension PluralType : Swift.Hashable {}
extension PLYLogger.LogLevel : Swift.Equatable {}
extension PLYLogger.LogLevel : Swift.Hashable {}
extension PLYLogger.LogLevel : Swift.RawRepresentable {}
extension PLYPlanType : Swift.Equatable {}
extension PLYPlanType : Swift.Hashable {}
extension PLYPlanType : Swift.RawRepresentable {}
extension PLYPresentationType : Swift.Equatable {}
extension PLYPresentationType : Swift.Hashable {}
extension PLYPresentationType : Swift.RawRepresentable {}
extension PLYPresentationAction : Swift.Equatable {}
extension PLYPresentationAction : Swift.Hashable {}
extension PLYPresentationAction : Swift.RawRepresentable {}
extension PLYProductViewControllerResult : Swift.Equatable {}
extension PLYProductViewControllerResult : Swift.Hashable {}
extension PLYProductViewControllerResult : Swift.RawRepresentable {}
extension PLYRunningMode : Swift.Equatable {}
extension PLYRunningMode : Swift.Hashable {}
extension PLYRunningMode : Swift.RawRepresentable {}
extension PLYSubscriptionError : Swift.Equatable {}
extension PLYSubscriptionError : Swift.Hashable {}
extension PLYSubscriptionEnvironment : Swift.Equatable {}
extension PLYSubscriptionEnvironment : Swift.Hashable {}
extension PLYSubscriptionEnvironment : Swift.RawRepresentable {}
extension PLYSubscriptionOfferTypeError : Swift.Equatable {}
extension PLYSubscriptionOfferTypeError : Swift.Hashable {}
extension PLYSubscriptionOfferType : Swift.Equatable {}
extension PLYSubscriptionOfferType : Swift.Hashable {}
extension PLYSubscriptionOfferType : Swift.RawRepresentable {}
extension PLYSubscriptionSourceError : Swift.Equatable {}
extension PLYSubscriptionSourceError : Swift.Hashable {}
extension PLYSubscriptionSource : Swift.Equatable {}
extension PLYSubscriptionSource : Swift.Hashable {}
extension PLYSubscriptionSource : Swift.RawRepresentable {}
extension PLYSubscriptionStatus : Swift.Equatable {}
extension PLYSubscriptionStatus : Swift.Hashable {}
extension PLYSubscriptionStatus : Swift.RawRepresentable {}
extension PLYUIControllerType : Swift.Equatable {}
extension PLYUIControllerType : Swift.Hashable {}
extension PLYUIControllerType : Swift.RawRepresentable {}
