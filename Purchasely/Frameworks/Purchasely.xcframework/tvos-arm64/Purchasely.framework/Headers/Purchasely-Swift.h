// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef PURCHASELY_SWIFT_H
#define PURCHASELY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Purchasely",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


enum PLYEvent : NSInteger;

@interface NSString (SWIFT_EXTENSION(Purchasely))
+ (NSString * _Nonnull)fromPLYEvent:(enum PLYEvent)event SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PLYAlertMessage, open) {
  PLYAlertMessageCommonError = 0,
  PLYAlertMessageInAppSuccess = 1,
  PLYAlertMessageInAppDeferred = 2,
  PLYAlertMessageInAppSuccessUnauthentified = 3,
  PLYAlertMessageInAppRestorationSuccess = 4,
  PLYAlertMessageInAppRestorationError = 5,
  PLYAlertMessageInAppError = 6,
  PLYAlertMessageUnsubscribeGoogle = 7,
  PLYAlertMessageUnsubscribeiOS = 8,
  PLYAlertMessageUnsubscribeAmazon = 9,
};

typedef SWIFT_ENUM(NSInteger, PLYAppTechnology, open) {
  PLYAppTechnologyCordova = 0,
  PLYAppTechnologyFlutter = 1,
  PLYAppTechnologyNative = 2,
  PLYAppTechnologyMacCatalyst = 3,
  PLYAppTechnologyReactNative = 4,
};

typedef SWIFT_ENUM(NSInteger, PLYCancellationReason, open) {
  PLYCancellationReasonPrice = 1,
  PLYCancellationReasonBetterApp = 2,
  PLYCancellationReasonNoLongerUseful = 3,
  PLYCancellationReasonNoUse = 4,
  PLYCancellationReasonTechnicalIssues = 5,
  PLYCancellationReasonOther = 6,
  PLYCancellationReasonUnknown = 7,
};

typedef SWIFT_ENUM(NSInteger, PLYEnvironment, open) {
  PLYEnvironmentProd = 0,
  PLYEnvironmentStaging = 1,
};

typedef SWIFT_ENUM(NSInteger, PLYEvent, open) {
  PLYEventAppConfigured = 0,
  PLYEventAppInstalled = 1,
  PLYEventAppStarted = 2,
  PLYEventAppUpdated = 3,
  PLYEventCancellationReasonPublished = 4,
  PLYEventCarouselSlideSwiped = 5,
  PLYEventDeeplinkOpened = 6,
  PLYEventInAppDeferred = 7,
  PLYEventInAppPurchaseFailed = 8,
  PLYEventInAppPurchased = 9,
  PLYEventInAppPurchasing = 10,
  PLYEventInAppRenewed = 11,
  PLYEventInAppRestored = 12,
  PLYEventLinkOpened = 13,
  PLYEventLoginTapped = 14,
  PLYEventPlanSelected = 15,
  PLYEventPresentationOpened = 16,
  PLYEventPresentationSelected = 17,
  PLYEventPresentationViewed = 18,
  PLYEventPromoCodeTapped = 19,
  PLYEventPurchaseCancelled = 20,
  PLYEventPurchaseCancelledByApp = 21,
  PLYEventPurchaseFromStoreTapped = 22,
  PLYEventPurchaseTapped = 23,
  PLYEventReceiptCreated = 24,
  PLYEventReceiptFailed = 25,
  PLYEventReceiptValidated = 26,
  PLYEventRestoreFailed = 27,
  PLYEventRestoreStarted = 28,
  PLYEventRestoreSucceeded = 29,
  PLYEventRestoreTapped = 30,
  PLYEventProductFetchError = 31,
  PLYEventSubscriptionCancelTapped = 32,
  PLYEventSubscriptionDetailsViewed = 33,
  PLYEventSubscriptionPlanTapped = 34,
  PLYEventSubscriptionsListViewed = 35,
  PLYEventSubscriptionsTransferred = 36,
  PLYEventUserLoggedIn = 37,
  PLYEventUserLoggedOut = 38,
};


SWIFT_PROTOCOL("_TtP10Purchasely16PLYEventDelegate_")
@protocol PLYEventDelegate
- (void)eventTriggered:(enum PLYEvent)event properties:(NSDictionary<NSString *, id> * _Nullable)properties;
@end

typedef SWIFT_ENUM(NSInteger, PLYEventProperty, open) {
  PLYEventPropertyTemplate = 0,
  PLYEventPropertySdkVersion = 1,
  PLYEventPropertyEventName = 2,
  PLYEventPropertyEventCreatedAtMs = 3,
  PLYEventPropertyEventCreated = 4,
  PLYEventPropertyDisplayedPresentation = 5,
  PLYEventPropertyUserId = 6,
  PLYEventPropertyAnonymousUserId = 7,
  PLYEventPropertyPurchasablePlans = 8,
  PLYEventPropertyDeeplinkIdentifier = 9,
  PLYEventPropertySourceIdentifier = 10,
  PLYEventPropertySelectedPlan = 11,
  PLYEventPropertyPlan = 12,
  PLYEventPropertyPreviousSelectedPlan = 13,
  PLYEventPropertyLinkIdentifier = 14,
  PLYEventPropertyCarousels = 15,
  PLYEventPropertyDevice = 16,
  PLYEventPropertyOsVersion = 17,
  PLYEventPropertyType = 18,
  PLYEventPropertyErrorMessage = 19,
  PLYEventPropertyLanguage = 20,
  PLYEventPropertyPlanType = 21,
  PLYEventPropertyPurchaselyPlanId = 22,
  PLYEventPropertyStore = 23,
  PLYEventPropertyStoreCountry = 24,
  PLYEventPropertyStoreProductId = 25,
  PLYEventPropertyPriceInCustomerCurrency = 26,
  PLYEventPropertyCustomerCurrency = 27,
  PLYEventPropertyPeriod = 28,
  PLYEventPropertyDuration = 29,
  PLYEventPropertyIntroPriceInCustomerCurrency = 30,
  PLYEventPropertyIntroPeriod = 31,
  PLYEventPropertyIntroDuration = 32,
  PLYEventPropertyFreePeriod = 33,
  PLYEventPropertyFreeDuration = 34,
  PLYEventPropertyHasFreeTrial = 35,
  PLYEventPropertyPromotionalOfferPriceInCustomerCurrency = 36,
  PLYEventPropertyPromotionalOfferPeriod = 37,
  PLYEventPropertyPromotionalOfferDuration = 38,
  PLYEventPropertyDiscountReferent = 39,
  PLYEventPropertyDiscountPercentageComparisonToReferent = 40,
  PLYEventPropertyDiscountPriceComparisonToReferent = 41,
  PLYEventPropertyIsDefault = 42,
  PLYEventPropertySelectedSlide = 43,
  PLYEventPropertyNumberOfSlides = 44,
  PLYEventPropertyIsCarouselAutoPlaying = 45,
  PLYEventPropertyDefaultSlide = 46,
  PLYEventPropertyPreviousSlide = 47,
  PLYEventPropertySelectedProduct = 48,
  PLYEventPropertyPlanChangeType = 49,
  PLYEventPropertyCancellationReasonId = 50,
  PLYEventPropertyCancellationReason = 51,
  PLYEventPropertyRunningSubscriptions = 52,
  PLYEventPropertyProduct = 53,
  PLYEventPropertySelectedPresentation = 54,
  PLYEventPropertyPreviousSelectedPresentation = 55,
  PLYEventPropertyPlacementId = 56,
  PLYEventPropertyAbTestId = 57,
  PLYEventPropertyAbTestVariantId = 58,
};

typedef SWIFT_ENUM(NSInteger, PLYEventType, open) {
  PLYEventTypePromotedIAP = 0,
  PLYEventTypePaywallUserBehavior = 1,
  PLYEventTypePayment = 2,
  PLYEventTypeSDKEvents = 3,
  PLYEventTypeReceipts = 4,
  PLYEventTypeCancellation = 5,
  PLYEventTypeRestorePurchase = 6,
  PLYEventTypeSubscriptionTransfer = 7,
  PLYEventTypeLogin = 8,
  PLYEventTypePhoneSettings = 9,
};


SWIFT_CLASS("_TtC10Purchasely9PLYLogger")
@interface PLYLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelDebug = 0,
  LogLevelInfo = 1,
  LogLevelWarn = 2,
  LogLevelError = 3,
};

enum PLYPlanType : NSInteger;

SWIFT_CLASS("_TtC10Purchasely7PLYPlan")
@interface PLYPlan : NSObject
@property (nonatomic, copy) NSString * _Nonnull vendorId;
@property (nonatomic, copy) NSString * _Nullable appleProductId;
@property (nonatomic) enum PLYPlanType type;
@property (nonatomic, copy) NSString * _Nullable name;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@interface PLYPlan (SWIFT_EXTENSION(Purchasely))
- (NSString * _Nullable)priceDifferenceWithComparedTo:(PLYPlan * _Nonnull)plan SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)priceDifferenceInPercentageTo:(PLYPlan * _Nonnull)plan SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDecimalNumber;

@interface PLYPlan (SWIFT_EXTENSION(Purchasely))
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable amount;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nullable introAmount;
@property (nonatomic, readonly, copy) NSString * _Nullable period;
@property (nonatomic, readonly, copy) NSString * _Nullable apiPeriod;
@property (nonatomic, readonly) NSInteger duration;
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
@property (nonatomic, readonly, copy) NSString * _Nullable currencySymbol;
- (NSString * _Nullable)localizedFullPriceWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedPriceWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedPeriodWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL hasIntroductoryPrice;
@property (nonatomic, readonly) BOOL hasFreeTrial;
- (NSString * _Nullable)localizedFullIntroductoryPriceWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedIntroductoryPriceWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedIntroductoryPeriodWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)introductoryPeriodWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)localizedIntroductoryDurationWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)introductoryDurationWithLanguage:(NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PLYPlanType, open) {
  PLYPlanTypeConsumable = 0,
  PLYPlanTypeNonConsumable = 1,
  PLYPlanTypeAutoRenewingSubscription = 2,
  PLYPlanTypeNonRenewingSubscription = 3,
  PLYPlanTypeUnknown = 4,
};

typedef SWIFT_ENUM(NSInteger, PLYPresentationAction, open) {
  PLYPresentationActionClose = 0,
  PLYPresentationActionLogin = 1,
  PLYPresentationActionNavigate = 2,
  PLYPresentationActionPurchase = 3,
  PLYPresentationActionRestore = 4,
  PLYPresentationActionOpenPresentation = 5,
  PLYPresentationActionPromoCode = 6,
};

@class NSURL;

SWIFT_CLASS("_TtC10Purchasely31PLYPresentationActionParameters")
@interface PLYPresentationActionParameters : NSObject
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) PLYPlan * _Nullable plan;
@property (nonatomic, copy) NSString * _Nullable presentation;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

SWIFT_CLASS("_TtC10Purchasely19PLYPresentationInfo")
@interface PLYPresentationInfo : NSObject
/// <code>controller</code> parameter represents current paywall controller displayed, <code>nil</code> if purchase was made manually.
@property (nonatomic, strong) UIViewController * _Nullable controller;
/// <code>contentId</code> parameter represents contentId associated with current paywall controller
@property (nonatomic, copy) NSString * _Nullable contentId;
/// <code>presentationId</code> parameter represents current paywall presentation id
@property (nonatomic, copy) NSString * _Nullable presentationId;
/// <code>placementId</code> parameter represents current placement id
@property (nonatomic, copy) NSString * _Nullable placementId;
/// <code>abTestVariantId</code> parameter represents current variant id when A/B testing
@property (nonatomic, copy) NSString * _Nullable abTestVariantId;
/// <code>abTestId</code> parameter represents current A/B test Id
@property (nonatomic, copy) NSString * _Nullable abTestId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10Purchasely10PLYProduct")
@interface PLYProduct : NSObject
@property (nonatomic, copy) NSString * _Nonnull vendorId;
@property (nonatomic, copy) NSArray<PLYPlan *> * _Nonnull plans;
@property (nonatomic, copy) NSString * _Nullable name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, PLYProductViewControllerResult, open) {
  PLYProductViewControllerResultPurchased = 0,
  PLYProductViewControllerResultCancelled = 1,
  PLYProductViewControllerResultRestored = 2,
};

typedef SWIFT_ENUM(NSInteger, PLYRunningMode, open) {
  PLYRunningModeTransactionOnly = 0,
  PLYRunningModeObserver = 1,
  PLYRunningModePaywallOnly = 2,
  PLYRunningModePaywallObserver = 3,
  PLYRunningModeFull = 4,
};

enum PLYSubscriptionSource : NSInteger;
@class NSDate;

SWIFT_CLASS("_TtC10Purchasely15PLYSubscription")
@interface PLYSubscription : NSObject
@property (nonatomic, strong) PLYProduct * _Nonnull product;
@property (nonatomic, strong) PLYPlan * _Nonnull plan;
@property (nonatomic) enum PLYSubscriptionSource subscriptionSource;
@property (nonatomic, copy) NSDate * _Nullable nextRenewalDate;
@property (nonatomic, copy) NSDate * _Nullable cancelledDate;
- (void)unsubscribe;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, PLYSubscriptionSource, open) {
  PLYSubscriptionSourceAppleAppStore = 0,
  PLYSubscriptionSourceGooglePlayStore = 1,
  PLYSubscriptionSourceAmazonAppstore = 2,
  PLYSubscriptionSourceHuaweiAppGallery = 3,
  PLYSubscriptionSourceNone = 4,
};

typedef SWIFT_ENUM(NSInteger, PLYUIControllerType, open) {
  PLYUIControllerTypeSubscriptionList = 0,
  PLYUIControllerTypeProductPage = 1,
  PLYUIControllerTypeWebPage = 2,
  PLYUIControllerTypeCancellationSurvey = 3,
};


SWIFT_PROTOCOL("_TtP10Purchasely13PLYUIDelegate_")
@protocol PLYUIDelegate
- (void)displayWithController:(UIViewController * _Nonnull)controller type:(enum PLYUIControllerType)type from:(UIViewController * _Nullable)sourceController;
- (void)displayWithAlert:(enum PLYAlertMessage)alert error:(NSError * _Nullable)error;
@end


/// This class manages the In App purchase process from grabbing the product details to performing
/// the purchase and sending the receipts to the server.
/// This manager is also meant to be used for restoration
SWIFT_CLASS("_TtC10Purchasely10Purchasely")
@interface Purchasely : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Purchasely (SWIFT_EXTENSION(Purchasely)) <UNUserNotificationCenterDelegate>
@end






@interface Purchasely (SWIFT_EXTENSION(Purchasely)) <PLYUIDelegate>
- (void)displayWithController:(UIViewController * _Nonnull)controller type:(enum PLYUIControllerType)type from:(UIViewController * _Nullable)sourceController;
- (void)displayWithAlert:(enum PLYAlertMessage)alert error:(NSError * _Nullable)error;
@end



@interface Purchasely (SWIFT_EXTENSION(Purchasely))
+ (void)showController:(UIViewController * _Nonnull)controller type:(enum PLYUIControllerType)type;
@end



@class NSLocale;
enum PLYAttribute : NSInteger;

@interface Purchasely (SWIFT_EXTENSION(Purchasely))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull anonymousUserId;)
+ (NSString * _Nonnull)anonymousUserId SWIFT_WARN_UNUSED_RESULT;
/// Sets the SDK to point to a client
/// This must be called in <code>didFinishLaunchingWithOptions</code> to handle the receipts sent on startup
+ (void)startWithAPIKey:(NSString * _Nonnull)apiKey appUserId:(NSString * _Nullable)appUserId runningMode:(enum PLYRunningMode)runningMode eventDelegate:(id <PLYEventDelegate> _Nullable)eventDelegate uiDelegate:(id <PLYUIDelegate> _Nullable)uiDelegate paywallActionsInterceptor:(void (^ _Nullable)(enum PLYPresentationAction, PLYPresentationActionParameters * _Nullable, PLYPresentationInfo * _Nullable, void (^ _Nonnull)(BOOL)))paywallActionsInterceptor logLevel:(enum LogLevel)logLevel initialized:(void (^ _Nullable)(BOOL, NSError * _Nullable))initialized;
+ (void)setEventDelegate:(id <PLYEventDelegate> _Nullable)eventDelegate;
+ (void)setUIDelegate:(id <PLYUIDelegate> _Nullable)uiDelegate;
/// This function is used to set a handler that is called when a user
/// makes an action in a paywall to give a chance to the app to intercept it
/// and act or let Purchasely deal with it (or both).
/// This can be done to
/// <ul>
///   <li>
///     Display terms and conditions that must be read and accepted before purchasing
///   </li>
///   <li>
///     Overrule the tap on a purchase button to use your own purchase system
///   </li>
///   <li>
///     (on kids app) make sure a parent is using the phone before opening Safari or showing Promo code sheet which is required by the App Store guidelines
///   </li>
/// </ul>
/// The handler gives you:
/// <ul>
///   <li>
///     <code>action</code>, a <code>PLYPresentationAction</code> enum describing the type
///   </li>
///   <li>
///     <code>parameters</code>, a dictionary with the parameters of the action (for Objective-C compliance it is not in the enum)
///   </li>
///   <li>
///     <code>controller</code>, the <code>UIViewController</code> used to display something above (like an error message) or dismiss it
///   </li>
///   <li>
///     <code>processAction</code> a completion handler parametered with a BOOL telling if Purchasely should process the action itself or ignore it.
///   </li>
/// </ul>
+ (void)setPaywallActionsInterceptor:(void (^ _Nullable)(enum PLYPresentationAction, PLYPresentationActionParameters * _Nullable, PLYPresentationInfo * _Nullable, void (^ _Nonnull)(BOOL)))paywallActionsInterceptor;
+ (void)userLoginWith:(NSString * _Nonnull)appUserId;
+ (void)userLoginWith:(NSString * _Nonnull)appUserId shouldRefresh:(void (^ _Nullable)(BOOL))shouldRefresh;
+ (void)userLogout;
/// This function sets a handler that is triggered once the purchase controller is dismissed.
/// It provides the output of the action (cancel, purchase, restore).
/// You can use it for your tracking or to decide if you want to display something post purchase.
/// You can override this handler by providing a different completion handler
/// in the <code>productController(for:with:completion:)</code> method.
/// This method is particularly helpful to get the result from controllers you didn’t indtanciate yourself
/// like Promoted In-App Purchases or product controllers displayed by deeplinks.
/// \param defaultPresentationResultHandler the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///
+ (void)setDefaultPresentationResultHandler:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))defaultPresentationResultHandler;
/// You can force a language for the SDK including error messages and paywall.
/// The language passed must be ISO 639-1 or ISO 639-2
+ (void)setLanguageFrom:(NSLocale * _Nullable)locale;
+ (void)isReadyToPurchase:(BOOL)ready;
+ (void)setEnvironment:(enum PLYEnvironment)environment;
+ (void)setLogLevel:(enum LogLevel)logLevel;
+ (void)setAppTechnology:(enum PLYAppTechnology)technology;
+ (void)setSdkBridgeVersion:(NSString * _Nullable)sdkBridgeVersion;
+ (void)allProductsWithSuccess:(void (^ _Nonnull)(NSArray<PLYProduct *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
+ (void)productWith:(NSString * _Nonnull)vendorId success:(void (^ _Nonnull)(PLYProduct * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
+ (void)planWith:(NSString * _Nonnull)vendorId success:(void (^ _Nonnull)(PLYPlan * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
+ (void)userSubscriptionsWithSuccess:(void (^ _Nonnull)(NSArray<PLYSubscription *> * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method returns a presentation for a specific product. If no presentationVendorId is set (or an invalid one)
/// the product default presentation will be displayed. If none has been set it will fallback to the app default presentation.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     productVendorId: the vendorId of the product to show
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     contentId: (optional) an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (UIViewController * _Nullable)productControllerFor:(NSString * _Nonnull)productVendorId with:(NSString * _Nullable)presentationVendorId contentId:(NSString * _Nullable)contentId loaded:(void (^ _Nullable)(UIViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific product. If no presentationVendorId is set (or an invalid one)
/// the product default presentation will be displayed. If none has been set it will fallback to the app default presentation.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     productVendorId: the vendorId of the product to show
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (UIViewController * _Nullable)productControllerFor:(NSString * _Nonnull)productVendorId with:(NSString * _Nullable)presentationVendorId loaded:(void (^ _Nullable)(UIViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific plan. If no presentationVendorId is set (or an invalid one)
/// the plan default presentation will be displayed. If none has been set it will fallback to the app default presentation.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     planVendorId: the vendorId of the product to show
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     contentId: (optional) an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (UIViewController * _Nullable)planControllerFor:(NSString * _Nonnull)planVendorId with:(NSString * _Nullable)presentationVendorId contentId:(NSString * _Nullable)contentId loaded:(void (^ _Nullable)(UIViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific plan. If no presentationVendorId is set (or an invalid one)
/// the plan default presentation will be displayed. If none has been set it will fallback to the app default presentation.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     planVendorId: the vendorId of the product to show
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (UIViewController * _Nullable)planControllerFor:(NSString * _Nonnull)planVendorId with:(NSString * _Nullable)presentationVendorId loaded:(void (^ _Nullable)(UIViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation with a specific vendorId. If no presentationVendorId is set (or an invalid one)
/// the app default presentation will be displayed.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     contentId: an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (UIViewController * _Nullable)presentationControllerWith:(NSString * _Nullable)presentationVendorId contentId:(NSString * _Nullable)contentId loaded:(void (^ _Nullable)(UIViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation with a specific vendorId. If no presentationVendorId is set (or an invalid one)
/// the app default presentation will be displayed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     presentationVendorId: (optional) the vendorId of a presentation
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (UIViewController * _Nullable)presentationControllerWith:(NSString * _Nullable)presentationVendorId loaded:(void (^ _Nullable)(UIViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific placement Id.
/// If a <code>contentId</code> is provided, this identifier will be sent to your backend for association purposes.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     placementId: the placementId identifying where the user was in your app
///   </li>
///   <li>
///     contentId: an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (UIViewController * _Nullable)presentationControllerFor:(NSString * _Nonnull)placementId contentId:(NSString * _Nullable)contentId loaded:(void (^ _Nullable)(UIViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// This method returns a presentation for a specific placement Id.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     placementId: the placementId of a group of presentations
///   </li>
///   <li>
///     completion: the block called after the product controller has been dismissed to give the output of the action (cancel, purchase, restore)
///   </li>
/// </ul>
+ (UIViewController * _Nullable)presentationControllerFor:(NSString * _Nonnull)placementId loaded:(void (^ _Nullable)(UIViewController * _Nullable, BOOL, NSError * _Nullable))loaded completion:(void (^ _Nullable)(enum PLYProductViewControllerResult, PLYPlan * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
+ (UIViewController * _Nullable)subscriptionsController SWIFT_WARN_UNUSED_RESULT;
+ (UIViewController * _Nullable)subscriptionControllerFor:(PLYSubscription * _Nonnull)subscription SWIFT_WARN_UNUSED_RESULT;
+ (UIViewController * _Nonnull)cancellationSurveyControllerFor:(PLYProduct * _Nullable)product selected:(void (^ _Nonnull)(enum PLYCancellationReason))selected SWIFT_WARN_UNUSED_RESULT;
/// This method must be called inside the AppDelegate open url method or SceneDelegate willConnectTo and openURLContexts
/// Check the documentation: https://docs.purchasely.com/advanced-features/deeplinks-and-automations
/// The controller will be displayed above the current controller.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     url: the URL of the deeplink to open
///   </li>
/// </ul>
+ (BOOL)handleWithDeeplink:(NSURL * _Nonnull)url;
/// This method performs a purchase on an plan of a Purchasely product
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     plan: the PLYPlan that you setup in Purchasely admin
///   </li>
///   <li>
///     success: the block called when the purchase was completed from end to end
///   </li>
///   <li>
///     contentId: (optional) an identifier that can be used to associate the purchase with your internal item id
///   </li>
///   <li>
///     failure: the block called when any error occured. The error can be displayed to the user using localizedDescription
///   </li>
/// </ul>
+ (void)purchaseWithPlan:(PLYPlan * _Nonnull)plan contentId:(NSString * _Nullable)contentId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method performs a purchase on an plan of a Purchasely product.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     plan: the PLYPlan that you setup in Purchasely admin
///   </li>
///   <li>
///     success: the block called when the purchase was completed from end to end
///   </li>
///   <li>
///     failure: the block called when any error occured. The error can be displayed to the user using localizedDescription
///   </li>
/// </ul>
+ (void)purchaseWithPlan:(PLYPlan * _Nonnull)plan success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method is used to restore previous purchases. Some might be successful and some in error.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     success: The closure that is called when at least one item was successfully restored. It might contain an error in case some items weren’t restored successfully.
///   </li>
///   <li>
///     failure: The closure that is called when at no item was restored
///   </li>
/// </ul>
+ (void)restoreAllProductsWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method is used to restore previous purchases. Some might be successful and some in error.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     success: The closure that is called when at least one item was successfully restored. It might contain an error in case some items weren’t restored successfully.
///   </li>
///   <li>
///     failure: The closure that is called when no item was restored
///   </li>
/// </ul>
+ (void)silentRestoreAllProductsWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
+ (void)setAttribute:(enum PLYAttribute)attribute value:(NSString * _Nonnull)value;
+ (void)startWithAPIKey:(NSString * _Nonnull)apiKey appUserId:(NSString * _Nullable)appUserId observerMode:(BOOL)observerMode eventDelegate:(id <PLYEventDelegate> _Nullable)eventDelegate uiDelegate:(id <PLYUIDelegate> _Nullable)uiDelegate confirmPurchaseHandler:(void (^ _Nullable)(UIViewController * _Nonnull, void (^ _Nonnull)(BOOL)))confirmPurchaseHandler logLevel:(enum LogLevel)logLevel initialized:(void (^ _Nullable)(BOOL, NSError * _Nullable))initialized SWIFT_UNAVAILABLE_MSG("With Purchasely 3.0.0, 2 parameters of the `start` method changed.\n 1. A more generic approach for interacting with paywall actions named `paywallActionsInterceptor` replaced the `confirmPurchaseHandler`.\n 2. New running modes were added alongside to `observerMode` to offer you more flexibility in Purchasely's use.");
+ (void)setLoginTappedHandler:(void (^ _Nullable)(UIViewController * _Nonnull, void (^ _Nonnull)(BOOL)))loginTappedHandler SWIFT_UNAVAILABLE_MSG("With Purchasely 3.0.0 `setLoginTappedHandler(_:)` was replaced with a more generic approach for interacting with paywall actions. You should now use the `paywallActionsInterceptor` and intercept the `login` action.");
+ (void)setConfirmPurchaseHandler:(void (^ _Nullable)(UIViewController * _Nonnull, void (^ _Nonnull)(BOOL)))confirmPurchaseHandler SWIFT_UNAVAILABLE_MSG("With Purchasely 3.0.0 `setConfirmPurchaseHandler(_:)` was replaced with a more generic approach for interacting with paywall actions. You should now use the `paywallActionsInterceptor` and intercept the `purchase` action.");
+ (void)setAppUserId:(NSString * _Nullable)appUserId SWIFT_UNAVAILABLE_MSG("Call `userLogin(with:)` when you have the userId or `userLogout()` when the user disconnects.");
@end

typedef SWIFT_ENUM(NSInteger, PLYAttribute, open) {
  PLYAttributeAmplitudeSessionId = 0,
  PLYAttributeFirebaseAppInstanceId = 1,
  PLYAttributeAirshipChannelId = 2,
  PLYAttributeBatchInstallationId = 3,
  PLYAttributeAdjustId = 4,
  PLYAttributeAppsflyerId = 5,
  PLYAttributeOneSignalPlayerId = 6,
  PLYAttributeMixpanelDistinctId = 7,
  PLYAttributeClevertapId = 8,
};

























#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
