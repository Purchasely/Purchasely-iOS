// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-tvos11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Purchasely
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import CommonCrypto
import Foundation
@_exported import Purchasely
import StoreKit
import Swift
import SwiftUI
import TVUIKit
import UIKit
import _Concurrency
import _StoreKit_SwiftUI
import _SwiftConcurrencyShims
extension Swift.Array {
  public subscript(safe index: Swift.Int) -> Element? {
    get
  }
}
@inlinable @inline(__always) internal func isHighTag(_ number: Swift.UInt8) -> Swift.Bool {
    return number == 0x1f
}
@inlinable @inline(__always) internal func lastTagNumber(_ byte: Swift.UInt8) -> Swift.Bool {
    return (byte & 0x80) == 0x1f
}
@inlinable @inline(__always) internal func lengthIsShortForm(_ byte: Swift.UInt8) -> Swift.Bool {
    return (byte & 0x80) == 0
}
@inlinable @inline(__always) internal func longFormLength(_ byte: Swift.UInt8) -> Swift.UInt8 {
    return (byte & 0x7f)
}
@inlinable @inline(__always) internal func highBits(_ field: Swift.UInt8, _ cnt: Swift.UInt8) -> Swift.UInt8 {
    return field >> (UInt8(MemoryLayout.size(ofValue: field))*8 - cnt)
}
@inlinable @inline(__always) internal func tlvConstructed(tag: Swift.UInt8) -> Swift.Bool {
    return tag & 0x20 != 0
}
public func loc(_ textToTranslate: Swift.String, comment: Swift.String = "", language: Swift.String? = nil) -> Swift.String
public enum LocalReceiptError : Swift.Error {
  case initializationFailed
  case receiptRefreshingInProgress
  case destroyRefreshSession
  public static func == (a: Purchasely.LocalReceiptError, b: Purchasely.LocalReceiptError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.NSNotification.Name {
  public static let ply_purchasedSubscription: Foundation.Notification.Name
  public static let ply_eligibilityUpdated: Foundation.Notification.Name
}
@_hasMissingDesignatedInitializers public class PlansEligibilityManager {
  public static let shared: Purchasely.PlansEligibilityManager
  @objc deinit
}
@objc public enum PLYAlertMessage : Swift.Int {
  case commonError
  case inAppSuccess
  case inAppDeferred
  case inAppSuccessUnauthentified
  case inAppRestorationSuccess
  case inAppRestorationError
  case inAppError
  case unsubscribeGoogle
  case unsubscribeiOS
  case unsubscribeAmazon
  public var title: Swift.String {
    get
  }
  public var content: Swift.String? {
    get
  }
  public var buttonTitle: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYAppTechnology : Swift.Int {
  case cordova
  case flutter
  case native
  case macCatalyst
  case reactNative
  case unity
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYFrequencyCapUnit : Swift.String, Swift.Decodable {
  case appSessions
  case seconds
  case minutes
  case days
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PLYImpressionCapUnit : Swift.String, Swift.Decodable {
  case displays
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PLYFrequencyCap : Swift.Decodable {
  public var unit: Purchasely.PLYFrequencyCapUnit?
  public var value: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
public struct PLYImpressionCap : Swift.Decodable {
  public var unit: Purchasely.PLYImpressionCapUnit?
  public var value: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
public enum PLYCampaignStatus : Swift.String, Swift.Decodable {
  case draft, running, deactivated
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PLYExposureWindowUnit : Swift.String, Swift.Decodable {
  case seconds, minutes, days
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PLYExposureWindowInit : Swift.String, Swift.Decodable {
  case firstDisplay
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PLYExposureWindow : Swift.Decodable {
  public let unit: Purchasely.PLYExposureWindowUnit?
  public let value: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PLYCampaign : ObjectiveC.NSObject, Swift.Decodable, Swift.Identifiable {
  public var id: Swift.String?
  public var publicId: Swift.String?
  public var startsAt: Foundation.Date?
  public var endsAt: Foundation.Date?
  public var frequencyCap: Purchasely.PLYFrequencyCap?
  public var impressionCap: Purchasely.PLYImpressionCap?
  public var exposureWindow: Purchasely.PLYExposureWindow?
  required public init(from decoder: any Swift.Decoder) throws
  public typealias ID = Swift.String?
  @objc deinit
}
@objc public class PLYCampaignTrigger : ObjectiveC.NSObject, Swift.Decodable {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc public enum PLYCancellationReason : Swift.Int {
  case price = 1
  case betterApp = 2
  case noLongerUseful = 3
  case noUse = 4
  case technicalIssues = 5
  case other = 6
  case unknown = 7
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYComponentError : Swift.Error {
  case unknownComponentType
  public static func == (a: Purchasely.PLYComponentError, b: Purchasely.PLYComponentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PLYConfig : Swift.Decodable {
  public var receiptPollingFrequency: Swift.Int
  public var receiptPollingMaxRetry: Swift.Int
  public var displayPoweredByPurchasely: Swift.Bool
  public var promoCodesEnabled: Swift.Bool
  public var trackedEvents: [Purchasely.PLYEvent]
  public var highPriorityEvents: [Purchasely.PLYEvent]
  public var requestLimitationThreshold: Swift.Double
  public var regionalizedLanguages: [Swift.String]
  public var autoImport: Swift.Bool
  public var autoImportRetryTime: Swift.Double
  public var autoImportRetryCount: Swift.Int
  public var storeKit2Configured: Swift.Bool
  public var userSubscriptionAutoFetchActivated: Swift.Bool
  public var userSubscriptionsCacheTTL: Swift.Int
  public var eventsBatchFrequencyInSeconds: Swift.Int
  public var eventsBatchMaxSize: Swift.Int
  public var eventsTimeDriftToleranceInMinutes: Swift.Int?
  public var campaigns: [Purchasely.PLYCampaign]
  public var triggers: [Purchasely.PLYCampaignTrigger]
  public var maxNumberOfOffering: Swift.Int
  public var userAttributesTrackedEvents: [Swift.String]
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc public enum PLYCustomPropertyDataType : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case int
  case float
  case string
  case date
  case bool
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Purchasely.PLYCustomPropertyDataType]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [Purchasely.PLYCustomPropertyDataType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYEnvironment : Swift.Int {
  case prod
  case staging
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYError : Swift.Error {
  case application(message: Swift.String?, code: Swift.String?)
  case parsing
  case network(statusCode: Swift.Int?, error: (any Swift.Error)?)
  case request
  case configuration
  case productNotFound
  case deferredPayment
  case psd2Required
  case absentReceipt
  case validationFailed
  case clientInvalid
  case paymentCancelled
  case paymentInvalid
  case paymentNotAllowed
  case storeProductNotAvailable
  case cloudServicePermissionDenied
  case cloudServiceNetworkConnectionFailed
  case cloudServiceRevoked
  case purchaseAlreadyRunning
  case restorationAlreadyRunning
  case noProductsToRestore
  case restorationFailedWithErrors([any Swift.Error])
  case restorationPartial([Swift.String], [any Swift.Error])
  case receiptValidationTimedOut
  case untrackedEvent
  case tooManyRequests(Swift.String?)
  case runningMode
  case unverifiedTransaction(Swift.String)
  case storekit2NotAvailable
  case unknown
  case ineligibleForOffer
  case purchaseNotAllowed
  case invalidQuantity
  case invalidOfferIdentifier
  case invalidOfferPrice
  case invalidOfferSignature
  case missingOfferParameters
}
extension Purchasely.PLYError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public enum PLYEvent : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case appConfigured
  case appInstalled
  case appStarted
  case appUpdated
  case cancellationReasonPublished
  case carouselSlideSwiped
  case deeplinkOpened
  case inAppDeferred
  case inAppPurchaseFailed
  case inAppPurchased
  case inAppPurchasing
  case inAppRenewed
  case inAppRestored
  case linkOpened
  case loginTapped
  case planSelected
  case presentationOpened
  case presentationSelected
  case presentationViewed
  case presentationLoaded
  case promoCodeTapped
  case purchaseCancelled
  case purchaseCancelledByApp
  case purchaseFromStoreTapped
  case purchaseTapped
  case receiptCreated
  case receiptFailed
  case receiptValidated
  case restoreFailed
  case restoreStarted
  case restoreSucceeded
  case restoreTapped
  case productFetchError
  case subscriptionCancelTapped
  case subscriptionDetailsViewed
  case subscriptionPlanTapped
  case subscriptionsListViewed
  case subscriptionsTransferred
  case userLoggedIn
  case userLoggedOut
  case presentationClosed
  case subscriptionContentUsed
  case optionsSelected
  case optionsValidated
  public var name: Swift.String {
    get
  }
  public var type: Purchasely.PLYEventType {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Purchasely.PLYEvent]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [Purchasely.PLYEvent] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.NSString {
  @objc public static func fromPLYEvent(_ event: Purchasely.PLYEvent) -> Swift.String
}
@objc public enum PLYEventProperty : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case template
  case sdkVersion
  case eventName
  case eventCreatedAtMs
  case eventCreated
  case eventCreatedAtMsOriginal
  case eventCreatedOriginal
  case displayedPresentation
  case isFallbackPresentation
  case userId
  case anonymousUserId
  case purchasablePlans
  case deeplinkIdentifier
  case sourceIdentifier
  case selectedPlan
  case plan
  case previousSelectedPlan
  case linkIdentifier
  case carousels
  case device
  case osVersion
  case type
  case errorMessage
  case language
  case planType
  case purchaselyPlanId
  case store
  case storeCountry
  case storeProductId
  case priceInCustomerCurrency
  case customerCurrency
  case period
  case duration
  case introPriceInCustomerCurrency
  case introPeriod
  case introDuration
  case freePeriod
  case freeDuration
  case hasFreeTrial
  case promotionalOfferPriceInCustomerCurrency
  case promotionalOfferPeriod
  case promotionalOfferDuration
  case discountReferent
  case discountPercentageComparisonToReferent
  case discountPriceComparisonToReferent
  case isDefault
  case selectedSlide
  case numberOfSlides
  case isCarouselAutoPlaying
  case defaultSlide
  case previousSlide
  case selectedProduct
  case planChangeType
  case cancellationReasonId
  case cancellationReason
  case runningSubscriptions
  case product
  case selectedPresentation
  case previousSelectedPresentation
  case placementId
  case audienceId
  case abTestId
  case abTestVariantId
  case contentId
  case sessionDuration
  case sessionCount
  case screenDuration
  case screenDisplayedAt
  case screenDisplayedAtMs
  case appInstalledAt
  case appInstalledAtMs
  case paywallrequestDurationInMs
  case storeKitVersion
  case presentationType
  case promoOffer
  case orientation
  case sessionId
  case selectedOptionId
  case selectedOptions
  case displayedOptions
  case campaignId
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Purchasely.PLYEventProperty]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [Purchasely.PLYEventProperty] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYEventType : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case promotedIAP
  case paywallUserBehavior
  case payment
  case SDKEvents
  case receipts
  case cancellation
  case restorePurchase
  case subscriptionTransfer
  case login
  case phoneSettings
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Purchasely.PLYEventType]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [Purchasely.PLYEventType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public class PLYImage : Swift.Decodable, Swift.Encodable, Swift.Equatable {
  public static func == (lhs: Purchasely.PLYImage, rhs: Purchasely.PLYImage) -> Swift.Bool
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public enum PLYLabelHighlightsError : Swift.Error {
  case invalidRange
  public static func == (a: Purchasely.PLYLabelHighlightsError, b: Purchasely.PLYLabelHighlightsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PluralType {
  case none
  case one
  case three
  case six
  case many
  public static func == (a: Purchasely.PluralType, b: Purchasely.PluralType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func PLYLocalizedPluralString(_ key: Swift.String, count: Swift.Int, language: Swift.String?) -> Swift.String
public func PLYLocalizedPluralString(_ key: Swift.String, pluralType: Purchasely.PluralType, language: Swift.String?) -> Swift.String
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PLYLogger : ObjectiveC.NSObject {
  @objc public enum PLYLogLevel : Swift.Int {
    case debug
    case info
    case warn
    case error
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public class func log(message: Swift.String, level: Purchasely.PLYLogger.PLYLogLevel = .debug)
  @objc deinit
}
@objc public protocol PLYLogging {
  @objc func messageLogged(message: Purchasely.PLYMessage)
}
@_hasMissingDesignatedInitializers @objc public class PLYMessage : ObjectiveC.NSObject {
  final public let message: Swift.String
  final public let logLevel: Swift.String
  final public let date: Foundation.Date
  @objc deinit
}
@objc @objcMembers public class PLYOffering : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let reference: Swift.String
  @objc final public let planId: Swift.String
  @objc final public let offerId: Swift.String?
  @objc public init(reference: Swift.String, planId: Swift.String, offerId: Swift.String?)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc(toJsonStringFromArray:) public static func toJsonString(from array: Foundation.NSArray) -> Swift.String?
  @objc deinit
}
extension Swift.Array where Element == Purchasely.PLYOffering {
  public func toJsonString() -> Swift.String?
}
@objc public class PLYOfferSignature : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var planVendorId: Swift.String
  @objc public var identifier: Swift.String
  @objc public var signature: Swift.String
  @objc public var nonce: Foundation.UUID
  @objc public var keyIdentifier: Swift.String
  @objc public var timestamp: Swift.Double
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc public class PLYPlan : ObjectiveC.NSObject, Swift.Decodable, Swift.Encodable {
  @objc public var vendorId: Swift.String
  @objc public var appleProductId: Swift.String?
  @objc public var type: Purchasely.PLYPlanType
  @objc public var name: Swift.String?
  @objc public var promoOffers: [Purchasely.PLYPromoOffer]
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
extension Purchasely.PLYPlan {
  @objc dynamic public var amount: Foundation.NSDecimalNumber? {
    @objc get
  }
  @objc dynamic public var introAmount: Foundation.NSDecimalNumber? {
    @objc get
  }
  @objc dynamic public var period: Swift.String? {
    @objc get
  }
  @objc dynamic public var apiPeriod: Swift.String? {
    @objc get
  }
  @objc dynamic public var duration: Swift.Int {
    @objc get
  }
  @objc dynamic public var currencyCode: Swift.String? {
    @objc get
  }
  @objc dynamic public var currencySymbol: Swift.String? {
    @objc get
  }
  @objc dynamic public func localizedFullPrice(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedPrice(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedPeriod(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public var hasIntroductoryPrice: Swift.Bool {
    @objc get
  }
  @objc dynamic public var hasPromoOffers: Swift.Bool {
    @objc get
  }
  @objc dynamic public var hasFreeTrial: Swift.Bool {
    @objc get
  }
  @objc dynamic public func localizedFullIntroductoryPrice(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedIntroductoryPrice(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedIntroductoryPeriod(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func introductoryPeriod(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func localizedIntroductoryDuration(language: Swift.String? = nil) -> Swift.String?
  @objc dynamic public func introductoryDuration(language: Swift.String? = nil) -> Swift.Int
}
extension Purchasely.PLYPlan {
  @objc dynamic public func priceDifference(comparedTo plan: Purchasely.PLYPlan) -> Swift.String?
  @objc dynamic public func priceDifferenceInPercentage(to plan: Purchasely.PLYPlan) -> Swift.String?
}
extension Purchasely.PLYPlan {
  @objc dynamic public func isUserEligibleForIntroductoryOffer(completion: @escaping (Swift.Bool) -> ())
}
@objc public enum PLYPlanType : Swift.Int, Swift.Codable {
  case consumable
  case nonConsumable
  case autoRenewingSubscription
  case nonRenewingSubscription
  case unknown
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class PLYPresentation : ObjectiveC.NSObject {
  @objc final public let id: Swift.String?
  @objc final public let language: Swift.String
  @objc final public let placementId: Swift.String?
  @objc final public let audienceId: Swift.String?
  @objc final public let abTestId: Swift.String?
  @objc final public let abTestVariantId: Swift.String?
  @objc final public let campaignId: Swift.String?
  @objc final public let type: Purchasely.PLYPresentationType
  @objc final public let controller: Purchasely.PLYPresentationViewController?
  @objc final public let plans: [Purchasely.PLYPresentationPlan]
  @objc final public let metadata: Purchasely.PLYPresentationMetadata?
  @objc final public let backgroundColor: UIKit.UIColor?
  @objc final public let height: Swift.Int
  @objc deinit
}
@objc public enum PLYPresentationType : Swift.Int {
  case normal = 0
  case fallback
  case deactivated
  case client
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYPresentationAction : Swift.Int {
  case close
  case login
  case navigate
  case purchase
  case restore
  case openPresentation
  case openPlacement
  case promoCode
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class PLYPresentationActionParameters : ObjectiveC.NSObject {
  @objc public var url: Foundation.URL?
  @objc public var title: Swift.String?
  @objc public var plan: Purchasely.PLYPlan?
  @objc public var promoOffer: Purchasely.PLYPromoOffer?
  @objc public var presentation: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PLYPresentationInfo : ObjectiveC.NSObject {
  @objc public var controller: UIKit.UIViewController?
  @objc public var contentId: Swift.String?
  @objc public var presentationId: Swift.String?
  @objc public var placementId: Swift.String?
  @objc public var audienceId: Swift.String?
  @objc public var abTestVariantId: Swift.String?
  @objc public var abTestId: Swift.String?
  @objc public var campaignId: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class PLYPresentationMetadata : ObjectiveC.NSObject {
  @objc public func getString(with key: Swift.String, completion: @escaping (Swift.String?) -> ())
  @objc public func getKeys() -> [Swift.String]
  @objc public func getRawMetadata() -> [Swift.String : Any]
  @objc deinit
}
@objc public class PLYPresentationPlan : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let planVendorId: Swift.String?
  @objc final public let storeProductId: Swift.String?
  @objc final public let offerId: Swift.String?
  @objc final public let offerVendorId: Swift.String?
  @objc final public let `default`: Swift.Bool
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@available(iOS 13.0, tvOS 13.0, macOS 12.0, watchOS 8.0, *)
@_Concurrency.MainActor @preconcurrency public struct PLYPresentationView : SwiftUI.UIViewControllerRepresentable {
  public typealias UIViewControllerType = Purchasely.PLYPresentationViewController
  @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: Purchasely.PLYPresentationView.Context) -> Purchasely.PLYPresentationViewController
  @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: Purchasely.PLYPresentationViewController, context: Purchasely.PLYPresentationView.Context)
  @available(iOS 13.0, tvOS 13.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 8.0, macOS 12.0, *)
  public typealias Coordinator = Swift.Void
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class PLYPresentationViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var isReady: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isDefaultPaywall: Swift.Bool {
    get
  }
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func setStatusBarHidden(shouldHide: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 13.0, tvOS 13.0, macOS 12.0, watchOS 8.0, *)
extension Purchasely.PLYPresentationViewController {
  @_Concurrency.MainActor @preconcurrency public var PresentationView: Purchasely.PLYPresentationView {
    get
  }
}
@objc public class PLYProduct : ObjectiveC.NSObject, Swift.Decodable, Swift.Encodable {
  @objc public var vendorId: Swift.String
  @objc public var plans: [Purchasely.PLYPlan]
  @objc public var name: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public typealias PLYProductViewControllerCompletionBlock = (Purchasely.PLYProductViewControllerResult, Purchasely.PLYPlan?) -> Swift.Void
public typealias PLYPresentationFetchCompletionBlock = (Purchasely.PLYPresentation?, (any Swift.Error)?) -> Swift.Void
public typealias PLYPresentationLoadedCompletionBlock = () -> Swift.Void
@objc public enum PLYProductViewControllerResult : Swift.Int {
  case purchased
  case cancelled
  case restored
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class PLYPromoOffer : ObjectiveC.NSObject, Swift.Decodable, Swift.Encodable {
  @objc public var vendorId: Swift.String
  @objc public var storeOfferId: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public enum PLYRunningMode : Swift.Int, Swift.CaseIterable {
  case transactionOnly
  case observer
  case paywallObserver
  case full
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Purchasely.PLYRunningMode]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [Purchasely.PLYRunningMode] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYSubscriptionError : Swift.Error {
  case couldntFindProduct
  public static func == (a: Purchasely.PLYSubscriptionError, b: Purchasely.PLYSubscriptionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class PLYSubscription : ObjectiveC.NSObject, Swift.Decodable, Swift.Encodable {
  @objc public var product: Purchasely.PLYProduct
  @objc public var plan: Purchasely.PLYPlan
  @objc public var subscriptionSource: Purchasely.PLYSubscriptionSource
  @objc public var nextRenewalDate: Foundation.Date?
  @objc public var cancelledDate: Foundation.Date?
  @objc public var originalPurchasedDate: Foundation.Date?
  @objc public var purchasedDate: Foundation.Date?
  @objc public var offerType: Purchasely.PLYSubscriptionOfferType
  @objc public var status: Purchasely.PLYSubscriptionStatus
  @objc public var environment: Purchasely.PLYSubscriptionEnvironment
  @objc public var storeCountry: Swift.String?
  @objc public var isFamilyShared: Swift.Bool
  @objc public var contentId: Swift.String?
  @objc public var offerIdentifier: Swift.String?
  @objc public var cumulatedRevenuesInUsd: Swift.Float
  @objc public var subscriptionDurationInDays: Swift.Int
  @objc public var subscriptionDurationInWeeks: Swift.Int
  @objc public var subscriptionDurationInMonths: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func unsubscribe()
  @objc deinit
}
@objc public enum PLYSubscriptionEnvironment : Swift.Int {
  case sandbox
  case production
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYSubscriptionOfferTypeError : Swift.Error {
  case invalidStringFormat
  public static func == (a: Purchasely.PLYSubscriptionOfferTypeError, b: Purchasely.PLYSubscriptionOfferTypeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum PLYSubscriptionOfferType : Swift.Int {
  case none
  case freeTrial
  case introOffer
  case promoCode
  case promotionalOffer
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYSubscriptionSourceError : Swift.Error {
  case invalidStringFormat
  public static func == (a: Purchasely.PLYSubscriptionSourceError, b: Purchasely.PLYSubscriptionSourceError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum PLYSubscriptionSource : Swift.Int {
  case appleAppStore
  case googlePlayStore
  case amazonAppstore
  case huaweiAppGallery
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYSubscriptionStatus : Swift.Int {
  case autoRenewing
  case onHold
  case inGracePeriod
  case autoRenewingCanceled
  case deactivated
  case revoked
  case paused
  case unpaid
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYUIControllerType : Swift.Int {
  case subscriptionList
  case productPage
  case webPage
  case cancellationSurvey
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYUserAttributeType : Swift.Int {
  case string = 0
  case bool
  case int
  case double
  case date
  case stringArray
  case intArray
  case doubleArray
  case boolArray
  case dictionary
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYUserAttributeSource : Swift.Int {
  case purchasely, client
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PLYUserAttributeDelegate {
  @objc optional func onUserAttributeSet(key: Swift.String, type: Purchasely.PLYUserAttributeType, value: Any?, source: Purchasely.PLYUserAttributeSource)
  @objc optional func onUserAttributeRemoved(key: Swift.String, source: Purchasely.PLYUserAttributeSource)
}
public typealias PLYSuccessErrorClosure = (Swift.Bool, (any Swift.Error)?) -> Swift.Void
public typealias PLYPaywallLoadingClosure = (Purchasely.PLYPresentationViewController?, Swift.Bool, (any Swift.Error)?) -> Swift.Void
public typealias PLYLoginTappedHandler = ((UIKit.UIViewController, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void)
public typealias PLYPaywallActionsInterceptor = ((Purchasely.PLYPresentationAction, Purchasely.PLYPresentationActionParameters?, Purchasely.PLYPresentationInfo?, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void)
public typealias PLYPurchaseConfirmationHandler = ((UIKit.UIViewController, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void)
public typealias PLYLoginCompletionHandler = (Swift.Bool) -> Swift.Void
public typealias PLYBoolClosure = (Swift.Bool) -> Swift.Void
public typealias PLYVoidClosure = () -> Swift.Void
public typealias PLYOfferSignatureClosure = (Purchasely.PLYOfferSignature) -> Swift.Void
public typealias PLYErrorClosure = (any Swift.Error) -> ()
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Purchasely : ObjectiveC.NSObject {
  @objc deinit
}
@objc public protocol PLYEventDelegate {
  @objc func eventTriggered(_ event: Purchasely.PLYEvent, properties: [Swift.String : Any]?)
}
extension Purchasely.Purchasely {
  @objc public static var anonymousUserId: Swift.String {
    @objc get
  }
  @objc dynamic public class func start(withAPIKey apiKey: Swift.String, appUserId: Swift.String? = nil, runningMode: Purchasely.PLYRunningMode = .full, paywallActionsInterceptor: Purchasely.PLYPaywallActionsInterceptor? = nil, storekitSettings: Purchasely.StorekitSettings, logLevel: Purchasely.PLYLogger.PLYLogLevel = .error, initialized: Purchasely.PLYSuccessErrorClosure? = nil)
  @objc dynamic public class func getSDKVersion() -> Swift.String?
  @objc dynamic public class func setUIHandler(_ uiHandler: (any Purchasely.PLYUIHandler)?)
  @objc dynamic public class func setUserAttributeDelegate(_ userAttributeDelegate: any Purchasely.PLYUserAttributeDelegate)
  @objc dynamic public class func setPaywallActionsInterceptor(_ paywallActionsInterceptor: Purchasely.PLYPaywallActionsInterceptor?)
  @objc dynamic public class func userLogin(with appUserId: Swift.String)
  @objc dynamic public class func userLogin(with appUserId: Swift.String, shouldRefresh: Purchasely.PLYLoginCompletionHandler?)
  @objc dynamic public class func userLogout(_ clearUserAttributes: Swift.Bool = true)
  @objc dynamic public class func isAnonymous() -> Swift.Bool
  @objc dynamic public class func setDefaultPresentationResultHandler(_ defaultPresentationResultHandler: Purchasely.PLYProductViewControllerCompletionBlock?)
  @objc dynamic public class func setLanguage(from locale: Foundation.Locale?)
  @objc dynamic public class func readyToOpenDeeplink(_ ready: Swift.Bool)
  @objc dynamic public class func setEnvironment(_ environment: Purchasely.PLYEnvironment)
  @objc dynamic public class func setLogLevel(_ logLevel: Purchasely.PLYLogger.PLYLogLevel)
  @objc dynamic public class func setAppTechnology(_ technology: Purchasely.PLYAppTechnology)
  @objc dynamic public class func setSdkBridgeVersion(_ sdkBridgeVersion: Swift.String?)
  @objc dynamic public class func addLogger(_ logger: any Purchasely.PLYLogging)
  @objc dynamic public class func allProducts(success: @escaping ([Purchasely.PLYProduct]) -> Swift.Void, failure: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc dynamic public class func product(with vendorId: Swift.String, success: @escaping (Purchasely.PLYProduct) -> Swift.Void, failure: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc dynamic public class func plan(with vendorId: Swift.String, success: @escaping (Purchasely.PLYPlan) -> Swift.Void, failure: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc dynamic public class func plan(for sku: Swift.String, success: @escaping (Purchasely.PLYPlan) -> Swift.Void, failure: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc dynamic public class func userSubscriptionsHistory(_ invalidateCache: Swift.Bool = false, success: @escaping ([Purchasely.PLYSubscription]?) -> Swift.Void, failure: @escaping Purchasely.PLYErrorClosure)
  @objc dynamic public class func userSubscriptions(_ invalidateCache: Swift.Bool = false, success: @escaping ([Purchasely.PLYSubscription]?) -> Swift.Void, failure: @escaping Purchasely.PLYErrorClosure)
  @objc dynamic public class func productController(for productVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, contentId: Swift.String? = nil, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationViewController?
  @objc dynamic public class func productController(for productVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationViewController?
  @objc dynamic public class func planController(for planVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, contentId: Swift.String?, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationViewController?
  @objc dynamic public class func planController(for planVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationViewController?
  @objc dynamic public class func presentationController(with presentationVendorId: Swift.String? = nil, contentId: Swift.String?, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationViewController?
  @objc dynamic public class func presentationController(with presentationVendorId: Swift.String? = nil, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationViewController?
  @objc dynamic public class func presentationController(for placementId: Swift.String, contentId: Swift.String?, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationViewController?
  @objc dynamic public class func presentationController(for placementId: Swift.String, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> UIKit.UIViewController?
  @objc dynamic public class func fetchPresentation(with presentationVendorId: Swift.String?, contentId: Swift.String?, fetchCompletion: Purchasely.PLYPresentationFetchCompletionBlock? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil, loadedCompletion: Purchasely.PLYPresentationLoadedCompletionBlock? = nil)
  @objc dynamic public class func fetchPresentation(with presentationVendorId: Swift.String?, fetchCompletion: Purchasely.PLYPresentationFetchCompletionBlock? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil, loadedCompletion: Purchasely.PLYPresentationLoadedCompletionBlock? = nil)
  @objc dynamic public class func fetchPresentation(for placementId: Swift.String, fetchCompletion: Purchasely.PLYPresentationFetchCompletionBlock? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil, loadedCompletion: Purchasely.PLYPresentationLoadedCompletionBlock? = nil)
  @objc dynamic public class func fetchPresentation(for placementId: Swift.String, contentId: Swift.String?, fetchCompletion: Purchasely.PLYPresentationFetchCompletionBlock? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil, loadedCompletion: Purchasely.PLYPresentationLoadedCompletionBlock? = nil)
  @objc dynamic public class func closeDisplayedPresentation()
  @objc dynamic public class func clientPresentationOpened(with presentation: Purchasely.PLYPresentation?)
  @objc dynamic public class func clientPresentationClosed(with presentation: Purchasely.PLYPresentation?)
  @objc dynamic public class func subscriptionsController() -> UIKit.UIViewController?
  @objc dynamic public class func subscriptionController(for subscription: Purchasely.PLYSubscription) -> UIKit.UIViewController?
  @objc dynamic public class func cancellationSurveyController(for product: Purchasely.PLYProduct?, selected: @escaping ((Purchasely.PLYCancellationReason) -> ())) -> UIKit.UIViewController
  @objc dynamic public class func setEventDelegate(_ callback: @escaping (Purchasely.PLYEvent, [Swift.String : Any]?) -> ())
  @available(iOS 13.0, tvOS 13.0, macOS 12.0, watchOS 8.0, *)
  public class func productView(for productVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, contentId: Swift.String? = nil, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationView?
  @available(iOS 13.0, tvOS 13.0, macOS 12.0, watchOS 8.0, *)
  public class func productView(for productVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationView?
  @available(iOS 13.0, tvOS 13.0, macOS 12.0, watchOS 8.0, *)
  public class func planView(for planVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, contentId: Swift.String?, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationView?
  @available(iOS 13.0, tvOS 13.0, macOS 12.0, watchOS 8.0, *)
  public class func planView(for planVendorId: Swift.String, with presentationVendorId: Swift.String? = nil, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationView?
  @available(iOS 13.0, tvOS 13.0, macOS 12.0, watchOS 8.0, *)
  public class func presentationView(with presentationVendorId: Swift.String? = nil, contentId: Swift.String?, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationView?
  @available(iOS 13.0, tvOS 13.0, macOS 12.0, watchOS 8.0, *)
  public class func presentationView(with presentationVendorId: Swift.String? = nil, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationView?
  @available(iOS 13.0, tvOS 13.0, macOS 12.0, watchOS 8.0, *)
  public class func presentationView(for placementId: Swift.String, contentId: Swift.String?, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationView?
  @available(iOS 13.0, tvOS 13.0, macOS 12.0, watchOS 8.0, *)
  public class func presentationView(for placementId: Swift.String, loaded: Purchasely.PLYPaywallLoadingClosure? = nil, completion: Purchasely.PLYProductViewControllerCompletionBlock? = nil) -> Purchasely.PLYPresentationView?
  @discardableResult
  @objc dynamic public class func isDeeplinkHandled(deeplink url: Foundation.URL) -> Swift.Bool
  @available(iOS 12.2, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @objc dynamic public class func signPromotionalOffer(plan: Purchasely.PLYPlan, promoOffer: Purchasely.PLYPromoOffer, success: @escaping Purchasely.PLYOfferSignatureClosure, failure: @escaping Purchasely.PLYErrorClosure)
  @available(iOS 12.2, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @objc dynamic public class func signPromotionalOffer(storeProductId: Swift.String, storeOfferId: Swift.String, success: @escaping Purchasely.PLYOfferSignatureClosure, failure: @escaping Purchasely.PLYErrorClosure)
  @objc public static func purchase(plan: Purchasely.PLYPlan, contentId: Swift.String?, success: @escaping Purchasely.PLYVoidClosure, failure: @escaping Purchasely.PLYErrorClosure)
  @objc public static func purchase(plan: Purchasely.PLYPlan, success: @escaping Purchasely.PLYVoidClosure, failure: @escaping Purchasely.PLYErrorClosure)
  @available(iOS 12.2, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @objc public static func purchaseWithPromotionalOffer(plan: Purchasely.PLYPlan, contentId: Swift.String?, storeOfferId: Swift.String, success: @escaping Purchasely.PLYVoidClosure, failure: @escaping Purchasely.PLYErrorClosure)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static func syncPurchase(with purchaseResult: StoreKit.Product.PurchaseResult) async throws
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @objc public static func syncPurchase(for productId: Swift.String) async throws
  @objc public static func restoreAllProducts(success: @escaping Purchasely.PLYVoidClosure, failure: @escaping Purchasely.PLYErrorClosure)
  @objc public static func synchronize(success: @escaping Purchasely.PLYVoidClosure, failure: @escaping Purchasely.PLYErrorClosure)
  @objc public static func getBuiltInAttributes() -> [Swift.String : Any]
  @objc public static func getBuiltInAttribute(with key: Swift.String) -> Any?
  @objc public static var userAttributes: [Swift.String : Any] {
    @objc get
  }
  @objc public static func getUserAttribute(for key: Swift.String) -> Any?
  @objc public static func setUserAttribute(withStringValue value: Swift.String, forKey key: Swift.String)
  @objc public static func setUserAttribute(withIntValue value: Swift.Int, forKey key: Swift.String)
  @objc public static func setUserAttribute(withDoubleValue value: Swift.Double, forKey key: Swift.String)
  @objc public static func setUserAttribute(withDateValue value: Foundation.Date, forKey key: Swift.String)
  @objc public static func setUserAttribute(withBoolValue value: Swift.Bool, forKey key: Swift.String)
  @objc public static func setUserAttribute(withBoolArray value: [Swift.Bool], forKey key: Swift.String)
  @objc public static func setUserAttribute(withIntArray value: [Swift.Int], forKey key: Swift.String)
  @objc public static func setUserAttribute(withStringArray value: [Swift.String], forKey key: Swift.String)
  @objc public static func setUserAttribute(withDoubleArray value: [Swift.Double], forKey key: Swift.String)
  @objc public static func incrementUserAttribute(withKey key: Swift.String, value: Swift.Int = 1)
  @objc public static func decrementUserAttribute(withKey key: Swift.String, value: Swift.Int = 1)
  @objc public static func setUserAttributes(_ attributes: [Swift.String : Any])
  @objc public static func clearUserAttributes()
  @objc public static func clearUserAttribute(forKey key: Swift.String)
  @objc public static func clearBuiltInAttributes()
  @objc public static func setDynamicOffering(reference: Swift.String, planVendorId: Swift.String, offerVendorId: Swift.String? = nil, completion: @escaping (Swift.Bool) -> ())
  @objc public static func getDynamicOfferings() -> [Purchasely.PLYOffering]
  @objc public static func getDynamicOfferings(completion: @escaping ([Purchasely.PLYOffering]) -> ())
  @objc public static func removeDynamicOffering(reference: Swift.String)
  @objc public static func clearDynamicOfferings()
  @objc public enum PLYAttribute : Swift.Int {
    case firebaseAppInstanceId
    case airshipChannelId
    case airshipUserId
    case batchInstallationId
    case adjustId
    case appsflyerId
    case oneSignalPlayerId
    case mixpanelDistinctId
    case clevertapId
    case sendinblueUserEmail
    case iterableUserEmail
    case iterableUserId
    case atInternetIdClient
    case mParticleUserId
    case customerioUserId
    case customerioUserEmail
    case branchUserDeveloperIdentity
    case amplitudeUserId
    case amplitudeDeviceId
    case moengageUniqueId
    case oneSignalExternalId
    case batchCustomUserId
    case oneSignalUserId
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc dynamic public class func setAttribute(_ attribute: Purchasely.Purchasely.PLYAttribute, value: Swift.String)
  public class func setAttributes(_ attributes: [Purchasely.Purchasely.PLYAttribute : Swift.String])
  @objc public enum PLYThemeMode : Swift.Int {
    case light
    case dark
    case system
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc dynamic public class func setThemeMode(_ mode: Purchasely.Purchasely.PLYThemeMode)
  @objc dynamic public class func userDidConsumeSubscriptionContent()
}
extension Purchasely.Purchasely : UserNotifications.UNUserNotificationCenterDelegate {
}
@objc public protocol PLYUIHandler {
  @objc optional func display(presentation: Purchasely.PLYPresentation, from sourceController: UIKit.UIViewController?, proceed: @escaping () -> ())
  @objc optional func display(alert: Purchasely.PLYAlertMessage, with error: (any Swift.Error)?, proceed: @escaping () -> ())
}
extension Purchasely.Purchasely {
  @objc dynamic public class func showController(_ controller: UIKit.UIViewController, type: Purchasely.PLYUIControllerType, from sourceViewController: UIKit.UIViewController? = nil)
}
public struct Safe<Base> : Swift.Decodable where Base : Swift.Decodable {
  public let value: Base?
  public init(from decoder: any Swift.Decoder)
}
@available(macCatalyst 14.0, iOS 11.0, tvOS 11.0, *)
extension StoreKit.SKProductStorePromotionController {
  public func resetStorePromotionsVisibility(for products: [StoreKit.SKProduct], completed: (() -> Swift.Void)?)
}
@objc public class StorekitSettings : ObjectiveC.NSObject {
  @objc public init(shouldUseStorekit2IfAvailable: Swift.Bool, simulateAskToBuy: Swift.Bool = false)
  @objc public static let storeKit1: Purchasely.StorekitSettings
  @objc public static let storeKit2: Purchasely.StorekitSettings
  @objc deinit
}
extension Swift.String {
  public func regexMatchGroup(_ pattern: Swift.String) -> [Swift.String]?
  public func regexMatch(_ pattern: Swift.String) -> Swift.Bool
}
extension Purchasely.Purchasely.PLYAttribute : Swift.Equatable {}
extension Purchasely.Purchasely.PLYAttribute : Swift.Hashable {}
extension Purchasely.Purchasely.PLYAttribute : Swift.RawRepresentable {}
extension Purchasely.LocalReceiptError : Swift.Equatable {}
extension Purchasely.LocalReceiptError : Swift.Hashable {}
extension Purchasely.PLYAlertMessage : Swift.Equatable {}
extension Purchasely.PLYAlertMessage : Swift.Hashable {}
extension Purchasely.PLYAlertMessage : Swift.RawRepresentable {}
extension Purchasely.PLYAppTechnology : Swift.Equatable {}
extension Purchasely.PLYAppTechnology : Swift.Hashable {}
extension Purchasely.PLYAppTechnology : Swift.RawRepresentable {}
extension Purchasely.PLYFrequencyCapUnit : Swift.Equatable {}
extension Purchasely.PLYFrequencyCapUnit : Swift.Hashable {}
extension Purchasely.PLYFrequencyCapUnit : Swift.RawRepresentable {}
extension Purchasely.PLYImpressionCapUnit : Swift.Equatable {}
extension Purchasely.PLYImpressionCapUnit : Swift.Hashable {}
extension Purchasely.PLYImpressionCapUnit : Swift.RawRepresentable {}
extension Purchasely.PLYCampaignStatus : Swift.Equatable {}
extension Purchasely.PLYCampaignStatus : Swift.Hashable {}
extension Purchasely.PLYCampaignStatus : Swift.RawRepresentable {}
extension Purchasely.PLYExposureWindowUnit : Swift.Equatable {}
extension Purchasely.PLYExposureWindowUnit : Swift.Hashable {}
extension Purchasely.PLYExposureWindowUnit : Swift.RawRepresentable {}
extension Purchasely.PLYExposureWindowInit : Swift.Equatable {}
extension Purchasely.PLYExposureWindowInit : Swift.Hashable {}
extension Purchasely.PLYExposureWindowInit : Swift.RawRepresentable {}
extension Purchasely.PLYCancellationReason : Swift.Equatable {}
extension Purchasely.PLYCancellationReason : Swift.Hashable {}
extension Purchasely.PLYCancellationReason : Swift.RawRepresentable {}
extension Purchasely.PLYComponentError : Swift.Equatable {}
extension Purchasely.PLYComponentError : Swift.Hashable {}
extension Purchasely.PLYCustomPropertyDataType : Swift.Equatable {}
extension Purchasely.PLYCustomPropertyDataType : Swift.Hashable {}
extension Purchasely.PLYCustomPropertyDataType : Swift.RawRepresentable {}
extension Purchasely.PLYEnvironment : Swift.Equatable {}
extension Purchasely.PLYEnvironment : Swift.Hashable {}
extension Purchasely.PLYEnvironment : Swift.RawRepresentable {}
extension Purchasely.PLYEvent : Swift.Equatable {}
extension Purchasely.PLYEvent : Swift.Hashable {}
extension Purchasely.PLYEvent : Swift.RawRepresentable {}
extension Purchasely.PLYEventProperty : Swift.Equatable {}
extension Purchasely.PLYEventProperty : Swift.Hashable {}
extension Purchasely.PLYEventProperty : Swift.RawRepresentable {}
extension Purchasely.PLYEventType : Swift.Equatable {}
extension Purchasely.PLYEventType : Swift.Hashable {}
extension Purchasely.PLYEventType : Swift.RawRepresentable {}
extension Purchasely.PLYLabelHighlightsError : Swift.Equatable {}
extension Purchasely.PLYLabelHighlightsError : Swift.Hashable {}
extension Purchasely.PluralType : Swift.Equatable {}
extension Purchasely.PluralType : Swift.Hashable {}
extension Purchasely.PLYLogger.PLYLogLevel : Swift.Equatable {}
extension Purchasely.PLYLogger.PLYLogLevel : Swift.Hashable {}
extension Purchasely.PLYLogger.PLYLogLevel : Swift.RawRepresentable {}
extension Purchasely.PLYPlanType : Swift.Equatable {}
extension Purchasely.PLYPlanType : Swift.Hashable {}
extension Purchasely.PLYPlanType : Swift.RawRepresentable {}
extension Purchasely.PLYPresentationType : Swift.Equatable {}
extension Purchasely.PLYPresentationType : Swift.Hashable {}
extension Purchasely.PLYPresentationType : Swift.RawRepresentable {}
extension Purchasely.PLYPresentationAction : Swift.Equatable {}
extension Purchasely.PLYPresentationAction : Swift.Hashable {}
extension Purchasely.PLYPresentationAction : Swift.RawRepresentable {}
@available(iOS 13.0, tvOS 13.0, macOS 12.0, watchOS 8.0, *)
extension Purchasely.PLYPresentationView : Swift.Sendable {}
extension Purchasely.PLYProductViewControllerResult : Swift.Equatable {}
extension Purchasely.PLYProductViewControllerResult : Swift.Hashable {}
extension Purchasely.PLYProductViewControllerResult : Swift.RawRepresentable {}
extension Purchasely.PLYRunningMode : Swift.Equatable {}
extension Purchasely.PLYRunningMode : Swift.Hashable {}
extension Purchasely.PLYRunningMode : Swift.RawRepresentable {}
extension Purchasely.PLYSubscriptionError : Swift.Equatable {}
extension Purchasely.PLYSubscriptionError : Swift.Hashable {}
extension Purchasely.PLYSubscriptionEnvironment : Swift.Equatable {}
extension Purchasely.PLYSubscriptionEnvironment : Swift.Hashable {}
extension Purchasely.PLYSubscriptionEnvironment : Swift.RawRepresentable {}
extension Purchasely.PLYSubscriptionOfferTypeError : Swift.Equatable {}
extension Purchasely.PLYSubscriptionOfferTypeError : Swift.Hashable {}
extension Purchasely.PLYSubscriptionOfferType : Swift.Equatable {}
extension Purchasely.PLYSubscriptionOfferType : Swift.Hashable {}
extension Purchasely.PLYSubscriptionOfferType : Swift.RawRepresentable {}
extension Purchasely.PLYSubscriptionSourceError : Swift.Equatable {}
extension Purchasely.PLYSubscriptionSourceError : Swift.Hashable {}
extension Purchasely.PLYSubscriptionSource : Swift.Equatable {}
extension Purchasely.PLYSubscriptionSource : Swift.Hashable {}
extension Purchasely.PLYSubscriptionSource : Swift.RawRepresentable {}
extension Purchasely.PLYSubscriptionStatus : Swift.Equatable {}
extension Purchasely.PLYSubscriptionStatus : Swift.Hashable {}
extension Purchasely.PLYSubscriptionStatus : Swift.RawRepresentable {}
extension Purchasely.PLYUIControllerType : Swift.Equatable {}
extension Purchasely.PLYUIControllerType : Swift.Hashable {}
extension Purchasely.PLYUIControllerType : Swift.RawRepresentable {}
extension Purchasely.PLYUserAttributeType : Swift.Equatable {}
extension Purchasely.PLYUserAttributeType : Swift.Hashable {}
extension Purchasely.PLYUserAttributeType : Swift.RawRepresentable {}
extension Purchasely.PLYUserAttributeSource : Swift.Equatable {}
extension Purchasely.PLYUserAttributeSource : Swift.Hashable {}
extension Purchasely.PLYUserAttributeSource : Swift.RawRepresentable {}
extension Purchasely.Purchasely.PLYThemeMode : Swift.Equatable {}
extension Purchasely.Purchasely.PLYThemeMode : Swift.Hashable {}
extension Purchasely.Purchasely.PLYThemeMode : Swift.RawRepresentable {}
